/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonIconPositions, ButtonIconSizes, ButtonSizes, ButtonTypes, ButtonVariants } from "./components/mylib-button/src/_types";
import { ThemeColorSchemes } from "./core/types/MylibThemableComponentInterface";
import { ControllablePropertyChangeEventDetail } from "./core/stencil/plugins/MylibControllableProperties";
export { ButtonIconPositions, ButtonIconSizes, ButtonSizes, ButtonTypes, ButtonVariants } from "./components/mylib-button/src/_types";
export { ThemeColorSchemes } from "./core/types/MylibThemableComponentInterface";
export { ControllablePropertyChangeEventDetail } from "./core/stencil/plugins/MylibControllableProperties";
export namespace Components {
    interface MylibAccordion {
        /**
          * Sets or gets the expand mode. Expand mode determines how the items will expand or collapse.
         */
        "expandMode": AccordionExpandModes;
        /**
          * Sets Accordion style variation
         */
        "variant": AccordionVariants;
    }
    interface MylibAccordionAction {
        /**
          * Enables or disables the action.
         */
        "disabled": boolean;
        /**
          * Set the action icon.
         */
        "icon": string;
    }
    interface MylibAccordionItem {
        /**
          * True if the item should be disabled.
         */
        "disabled": boolean;
        /**
          * Sets or gets the expanded state.
         */
        "expanded": boolean;
        /**
          * Set a position to the header tooltip
          * @type {string}
         */
        "headerTooltipPosition": 'right' | 'bottom' | 'left' | 'top';
        /**
          * Set a text to the header tooltip
          * @type {string}
         */
        "headerTooltipText": string;
        /**
          * True if collapse icon should be hidden
         */
        "hideCollapseIcon": boolean;
        /**
          * Sets or gets the label for the item.
         */
        "label": string;
        /**
          * True if the item is placed into another Accordion Item (It's set automacatically by the parent Accordion component at "Load" lifecycle).
         */
        "nested": boolean;
        /**
          * True if slot content should not have padding
         */
        "noContentPadding": boolean;
        /**
          * Sets Accordion style variation.
         */
        "variant": AccordionVariants;
    }
    interface MylibAdvancedSearch {
        "getSearchBoxValue": () => Promise<string>;
        "searchInitialValue": string;
        "searchPlaceholder": string;
        "setSearchBoxValue": (newValue: string) => Promise<void>;
    }
    interface MylibApplicationFrame {
        "appName": string;
    }
    interface MylibApplicationFrameAppName {
        "appName": string;
    }
    interface MylibAvatar {
        "firstName": string | null;
        "hasLabel": boolean;
        "imageUrl": string | null;
        "labelPosition": 'row' | 'column';
        "lastName": string | null;
        "size": AvatarOptionSizesListTypes;
        "tooltip": string | null;
    }
    interface MylibBreadcrumb {
        "compactMode": boolean;
        "compactModeExpanded": boolean;
        "compactModeTitle": string;
        "currentPageClickEnabled": boolean;
        "hideCurrentPageHighlight": boolean;
        "items": string;
        "label": string | undefined;
        "variant": "base";
    }
    interface MylibButton {
        /**
          * The current button color scheme (light/dark).
         */
        "colorScheme": ThemeColorSchemes;
        /**
          * If true, the button is disabled.
         */
        "disabled": boolean;
        /**
          * The icon name to include in the button.
         */
        "icon": string;
        /**
          * The position to align the icon to, relative to the button label.
         */
        "iconPosition": ButtonIconPositions;
        /**
          * The size of the icon contained in the button
         */
        "iconSize": ButtonIconSizes;
        /**
          * The icon type to include in the button.
         */
        "iconType": string;
        /**
          * The button's text label.
         */
        "label": string;
        /**
          * The size of the button.
         */
        "size": ButtonSizes;
        /**
          * Sets the button state as pressed/active.
         */
        "toggled": boolean;
        /**
          * The type of the button.
         */
        "type": ButtonTypes;
        /**
          * The style variant of the button.
         */
        "variant": ButtonVariants;
    }
    interface MylibCard {
        "error": boolean;
        "isDraggable": boolean;
        "layout": 'default' | 'reverse' | 'horizontal' | 'reverse-horizontal';
        "nonInteractive": boolean;
        "rel": string | undefined;
        "selectable": boolean;
        "selected": boolean;
        "summaryText": string;
        "target": string;
        "titleAlign": 'left' | 'center' | 'right';
        "titleText": string;
        "url": string;
    }
    interface MylibCardBody {
        "summaryText": string;
        "titleAlign": 'left' | 'center' | 'right';
        "titleText": string;
    }
    interface MylibCardHeader {
        "titleAlign": 'left' | 'center' | 'right';
        "titleText": string;
    }
    interface MylibCardSummary {
        "text": string;
    }
    interface MylibCardTitle {
        "text": string;
    }
    interface MylibCheckbox {
        "checked": boolean;
        "dirty": boolean;
        "disabled": boolean;
        "error": boolean;
        "indeterminate": boolean;
        "isControlled": boolean;
        "label": string;
        "name": string;
        "value": string;
    }
    interface MylibCheckboxGroup {
        "dirty": boolean;
        "disabled": boolean;
        "error": boolean;
        "errorMessage": string;
        "errorTooltip": string;
        "getCheckedItems": () => Promise<IMylibCheckboxGroupItem[]>;
        "items": string;
        "itemsListType": CheckboxGroupItemsListTypes;
        "label": string;
        "name": string;
        "setItemChecked": (key: IMylibCheckboxGroupItem['key'], checked: IMylibCheckboxGroupItem['checked']) => Promise<void>;
        "setItemDirty": (key: IMylibCheckboxGroupItem['key'], dirty: IMylibCheckboxGroupItem['dirty']) => Promise<void>;
        "setItemDisabled": (key: IMylibCheckboxGroupItem['key'], disabled: IMylibCheckboxGroupItem['disabled']) => Promise<void>;
        "setItemError": (key: IMylibCheckboxGroupItem['key'], error: IMylibCheckboxGroupItem['error']) => Promise<void>;
        "showSelectAllItems": boolean;
    }
    interface MylibComboBox {
        "disableTruncated": boolean;
        "items": IMylibComboBoxItem[] | string;
        "label": string;
        "opened": boolean;
        "placeholder": string;
        "value": string;
    }
    interface MylibComboBoxItem {
        "checked": boolean;
        "text": string;
        "value": string;
    }
    interface MylibCommandBar {
        "borderless": boolean;
        "iconLarge": boolean;
        "orientation": 'horizontal' | 'vertical';
        "shadowPosition": 'left' | 'none';
    }
    interface MylibCommandButton {
        "colorScheme": ThemeColorSchemes;
        "disabled": boolean;
        "hiddenLabel": boolean;
        "icon": string;
        "iconSize": 'md' | 'lg';
        "iconType": 'font' | 'svg';
        "isToggle": boolean;
        "label": string;
        "orientation": 'horizontal' | 'vertical';
        "toggled": boolean;
    }
    interface MylibCommandDropdown {
        "disabled": boolean;
        "hiddenLabel": boolean;
        "icon": string;
        "iconSize": 'md' | 'lg';
        "label": string;
        "opened": boolean;
        "orientation": 'horizontal' | 'vertical';
        "toggled": boolean;
    }
    interface MylibCommandDropdownItem {
        "disabled": boolean;
        "hiddenLabel": boolean;
        "icon": string;
        "iconSize": 'md' | 'lg';
        "label": string;
    }
    interface MylibCommandPipe {
    }
    interface MylibDatepicker {
        /**
          * If `true`, the date picker is disabled and cannot be interacted with.
          * @type {boolean}
          * @default false
         */
        "disabled": boolean;
        "error": boolean;
        "errorMessage": string;
        /**
          * If `true`, hide the hint displaying input format above the input.
          * @type {boolean}
          * @default false
         */
        "hideHint": boolean;
        /**
          * If `true`, hide the tooltip displaying text 'Click to edit' over the input.
          * @type {boolean}
          * @default false
         */
        "hideTooltip": boolean;
        /**
          * The format of the date mask in the input field.
          * @type {string}
          * @default 'MM-DD-YYYY'
         */
        "inputFormat": string;
        /**
          * The label associated with the date picker input field.
          * @type {string}
          * @default 'Date'
         */
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name": string;
        /**
          * If `true`, turns the date picker dropdown visible.
          * @type {boolean}
          * @default undefined
         */
        "opened"?: boolean;
        /**
          * The current value of the date picker in a Date string format (using the function 'toJSON' from Date object).
          * @type {string}
          * @default undefined
         */
        "value"?: string;
    }
    /**
     * @class DatepickerCalendar
     * The DatepickerCalendar component is responsible for rendering a datepicker calendar
     * and handling user interactions with the calendar.
     */
    interface MylibDatepickerCalendar {
        /**
          * The format of the date mask in the input field.
          * @type {string}
          * @default 'MM-DD-YYYY'
         */
        "inputFormat": string;
        "resetViewToSelected": () => Promise<void>;
        /**
          * The current value in a Date string format (using the function 'toJSON' from Date object).
          * @type {string}
          * @default undefined
         */
        "value"?: string;
    }
    interface MylibDefaultCell {
        "cellTitle": string;
        "density": 'cozy' | 'compact';
        "description": string;
        "grayish": boolean;
        "imgAlt": string;
        "imgSrc": string;
        "selectable": boolean;
        "selected": boolean;
        "subTitle": string;
    }
    interface MylibDefaultCellGroup {
        /**
          * Cell density layout mode, apply to all direct child cells.
         */
        "cellDensity": 'cozy' | 'compact';
        "expanded": boolean;
        /**
          * Group Cell title text.
         */
        "groupTitle": string;
    }
    interface MylibDropdown {
        "clearAllLabel": string;
        "customSortFunc": (a: MylibDropDownMenuOptionItem, b: MylibDropDownMenuOptionItem) => number | undefined;
        "dirty": boolean;
        "enableClearAll": boolean;
        "enableDirtyState": boolean;
        "enableSelectAll": boolean;
        "error": boolean;
        "errorMessage": string;
        "errorMessagePosition": 'bottom' | 'top';
        "hint": string;
        /**
          * @date 2/23/2023
          * @deprecated initialValue is not necessary anymore, you can replace it by the controlled attribute 'value', this attribute needs to set as an array
         */
        "initialValue"?: string | string[];
        "itemsCount": number;
        "label": string;
        "loading": boolean;
        "notTruncateOptionDescription": boolean;
        "opened": boolean;
        "options": MylibDropDownMenuOptionItem[];
        /**
          * @date 9/9/2022
          * @deprecated Use the property options instead
         */
        "optionsList": MylibDropDownMenuOptionItem[];
        "placeholder": string;
        "placeholderIcon": string;
        "required": boolean;
        "selectAllLabel": string;
        "selectionMode": 'single' | 'multiple';
        "sortOptions": boolean;
        "transformTitle"?: (title: string, value: string[]) => string;
        /**
          * @date 9/9/2022
          * @deprecated the need for description will be inferred by the item object in the options list
         */
        "truncateDescription": boolean;
        "value"?: string[];
        /**
          * @date 9/9/2022
          * @deprecated the need for description will be inferred by the item object in the options list
         */
        "withDescription": boolean;
        "withSearch": boolean;
    }
    /**
     * DEPRECATED Dropdown Component
     * @date 9/14/2022
     * @deprecated Use  mylib-dropdown instead.
     */
    interface MylibDropdownMenu {
        "alternate": true | false;
        "initialValue": string;
        "optionsList": string;
        "placeholder": string;
        "placeholderIcon": string;
        "truncateDescription": true | false;
        "withDescription": true | false;
    }
    /**
     * Component for uploading files.
     * @fires fileRejected - Fired when a file cannot be added to the queue due to a constrain: file-size, file-type or maxFiles
     * @fires uploadStarting - Fired before the XHR is opened. Could be used for changing the request URL. If the default is prevented, then XHR would not be opened.
     * @fires uploadStarted - Fired when the XHR is sent.
     * @fires uploadSending - Fired when the XHR has been opened but not sent yet.
     * @fires uploadError - Fired in case the upload process failed.
     * @fires uploadProgress - Fired as many times as the progress is updated.
     * @fires uploadAbort - Fired when retry abort is requested. If the default is prevented, then the file upload would not be aborted.
     * @fires uploadCompleted - Fired in case the upload process succeed.
     */
    interface MylibFileUpload {
        /**
          * Specifies the types of files that the server accepts. Syntax: a comma-separated list of MIME type patterns (wildcards are allowed) or file extensions. Notice that MIME types are widely supported, while file extensions are only implemented in certain browsers, so avoid using it. Example: accept="video/*,image/tiff" or accept=".pdf,audio/mp3"
          * @date 12/1/2022 - 11:31:37 PM
          * @example accept="video/*,image/tiff" or accept=".pdf,audio/mp3"
          * @type {string}
         */
        "accept": string;
        /**
          * Specifies the 'name' property at Content-Disposition
          * @date 12/1/2022 - 11:44:58 PM
          * @type {string}
         */
        "formDataName": string;
        /**
          * Key-Value map to send to the server. If you set this property as an attribute, use a valid JSON string.
          * @date 12/1/2022 - 11:45:48 PM
          * @type {{}}
         */
        "headers": {};
        /**
          * Specifies if the component is draggable.
          * @type {boolean}
          * @default false
         */
        "isDraggable": boolean;
        /**
          * Prevents upload(s) from immediately uploading upon adding file(s). When set, you must manually trigger uploads using the uploadFiles method
          * @date 12/1/2022 - 11:36:27 PM
          * @type {boolean}
         */
        "manualUpload": boolean;
        /**
          * Specifies the maximum file size in bytes allowed to upload. Notice that it is a client-side constraint, which will be checked before sending the request. Obviously you need to do the same validation in the server-side and be sure that they are aligned. Maximum default value is 2e+6 = 2MB
          * @date 12/1/2022 - 11:35:14 PM
          * @type {number}
         */
        "maxFileSize": number;
        /**
          * Limit of files to upload, by default it is unlimited. If the value is set to one, native file browser will prevent selecting multiple files.
          * @date 12/1/2022 - 11:34:33 PM
          * @type {number}
         */
        "maxFiles": number;
        /**
          * HTTP Method used to send the files. Only POST and PUT are allowed.
          * @date 12/1/2022 - 11:45:15 PM
          * @type {string}
         */
        "method": string;
        /**
          * Overrides the properties of a file in the files to upload array.
          * @param fileIndex - The index of the file in the files array.
          * @param props - The properties to override in the File.
          * @returns
         */
        "overrideFileProps": (fileIndex: number, props?: { progress?: number; }) => Promise<void>;
        /**
          * Triggers the upload of all opened files
          * @return - Count of files to upload or is uploading
         */
        "startUpload": () => Promise<number>;
        /**
          * The server URL. The default value is an empty string, which means that window.location will be used.
          * @date 12/1/2022 - 11:34:08 PM
          * @type {(string | undefined)}
         */
        "targetUrl": string | undefined;
        /**
          * Max time in milliseconds for the entire upload process, if exceeded the request will be aborted. Zero means that there is no timeout.
          * @date 12/1/2022 - 11:48:01 PM
          * @type {number}
         */
        "timeout": number;
        /**
          * The upload engine instance used for file uploads.
          * @type {IMylibFileUploadEngine}
          * @default new MylibXHRFileUploadEngine()
         */
        "uploadEngineInstance": IMylibFileUploadEngine;
        /**
          * Triggers the upload of any files that are not completed
          * @param files - Files being uploaded. Defaults to all outstanding files
          * @return - Count of files to upload or is uploading
         */
        "uploadFiles": (files: (IMylibFile | IMylibFile[]) | undefined) => Promise<number>;
        /**
          * Set the withCredentials flag on the request.
          * @date 12/1/2022 - 11:48:14 PM
          * @type {boolean}
         */
        "withCredentials": boolean;
    }
    interface MylibFloatingButton {
        "icon": string | undefined;
        "iconType": floatingButtonIconType;
        "label": string | undefined;
        "size": floatingButtonSizes;
        "variant": floatingButtonVariants;
    }
    /**
     * DEPRECATED Global Frame Component
     * @date 6/29/2022
     * @deprecated Use  mylib-application-frame instead.
     */
    interface MylibGlobalFrame {
        "appName": string;
    }
    interface MylibGlobalFrameAppName {
        "appName": string;
    }
    interface MylibIcon {
        "name": string;
        "size": string;
        "type": 'font' | 'svg';
    }
    interface MylibInformationBar {
        "buttonText": string;
        "closable": boolean;
        "fullWidthMode": boolean;
        "informationText": string;
        "label": string;
        "useIcon": boolean;
        "variant": 'info' | 'success' | 'warning' | 'error';
    }
    interface MylibInputField {
        "alternateStyle": boolean;
        "ariaDescribedby": string;
        "autofocus": boolean;
        "charLength": number;
        "dirty": boolean;
        "disabled": boolean;
        "error": boolean;
        "errorList": any[];
        "errorMessage": string;
        "errorMessagePosition": 'bottom' | 'top';
        "hint"?: string | null;
        "inputIconButton": string;
        "inputId": string | null;
        "label": string;
        "list"?: string | null;
        "max"?: string | null;
        "maxlength"?: number | null;
        "min"?: string | null;
        "minlength"?: number;
        "name": string;
        "pattern"?: string | null;
        "placeholder": string;
        "readonly": boolean;
        "required": boolean;
        "size"?: number | null;
        "step"?: string | null;
        "type": 'number' | 'email' | 'password' | 'url' | 'text';
        "value"?: string | number | null;
    }
    /**
     * DEPRECATED Label Component
     * @date 6/29/2022
     * @deprecated Use  mylib-property-value instead.
     */
    interface MylibLabel {
        "colon": boolean;
        "group": boolean;
        "label": string;
        "status": 'default' | 'error' | 'success' | 'warning' | 'hyperlink';
    }
    interface MylibLink {
        "disabled": boolean;
        "hideTooltip": boolean;
        "rel": string | undefined;
        "target": string;
        "text": string | undefined;
        "tooltipText": string | undefined;
        "truncated": boolean;
        "url": string | undefined;
    }
    interface MylibLoadingIndicator {
        "bufferProgress": number | undefined;
        "i18nComplete": string;
        "i18nLoading": string;
        "max": number | undefined;
        "min": number | undefined;
        "progress": number | undefined;
        "size": string | undefined;
        "type": string | undefined;
    }
    interface MylibLogo {
        "colorScheme": ThemeColorSchemes;
    }
    interface MylibMenu {
        "hideMenu": () => Promise<void>;
        /**
          * @date 12/11/2023
          * @deprecated isShowMenu is not necessary anymore, you can replace it by the controlled attribute 'opened'
         */
        "isShowMenu": boolean;
        "menuItems": IMylibMenuItem[] | string;
        "menuTitle"?: string;
        "minWidth"?: number;
        "opened": boolean;
        "showMenu": () => Promise<void>;
    }
    interface MylibMenuItem {
        "canBeSelected": boolean;
        "hasSubItems": boolean;
        "iconName": string;
        "itemKey": string;
        "noCheckIcon": boolean;
        "removePaddingLeft": boolean;
        "selected": boolean;
        "target": string;
        "text": string;
        "url": string;
        "useBottomDivider": boolean;
    }
    interface MylibModalDialog {
        "close": () => Promise<void>;
        "dialogTitle": string;
        "hideCloseButton": boolean;
        "isDraggable": boolean;
        "isModal": boolean;
        "open": () => Promise<void>;
        "opened": boolean;
        "type": 'input' | 'danger';
    }
    interface MylibNotificationBadge {
        "value": number;
        "variant": 'default' | 'positive' | 'negative' | 'warning';
    }
    interface MylibPanel {
        "close": () => Promise<void>;
        "fullHeightMode": boolean;
        "headerTitle": string;
        "hideSwitchHeightAction": boolean;
        "hideSwitchPinAction": boolean;
        "open": () => Promise<void>;
        "openDirection": 'left-to-right' | 'right-to-left';
        "opened": boolean;
        "pinned": boolean;
    }
    interface MylibPanelBody {
    }
    interface MylibPanelFooter {
    }
    interface MylibPanelSection {
        "collapse": () => Promise<void>;
        "collapsed": boolean;
        "compactMode": boolean;
        "expand": () => Promise<void>;
        "hideTooltip": boolean;
        "label": string;
    }
    interface MylibPanelSectionCommand {
        "disabled": boolean;
        "hiddenLabel": boolean;
        "icon": string;
        "iconType": 'font' | 'svg';
        "isToggle": boolean;
        "label": string;
        "toggled": boolean;
    }
    interface MylibPopupMenu {
        "alignment": 'left' | 'right';
        "colorScheme": ThemeColorSchemes;
        "direction": 'below' | 'above';
        "notCloseClickOutside": boolean;
        "opened": boolean;
        "popupTargetTriggerEvent": string;
        "popupTitle": string;
        "showCloseButton": boolean;
    }
    /**
     * DEPRECATED Dropdown Component
     * @date 7/27/2023
     * @deprecated Use mylib-primary-navigation-bar instead.
     */
    interface MylibPrimaryNavigation {
        "getNavItemById": (id: string) => Promise<HTMLElement>;
        "hideAccountIcon": boolean;
        "hideCommandItemsLabel": boolean;
        "icon": string;
        "iconType": 'font' | 'svg';
    }
    interface MylibPrimaryNavigationBar {
        "getNavItemById": (id: string) => Promise<HTMLElement>;
        "hideAccountIcon": boolean;
        "hideCommandItemsLabel": boolean;
        "icon": string;
        "iconType": 'font' | 'svg';
    }
    interface MylibPrimaryNavigationPanel {
        "alignBottom": boolean;
        "closeOnClickOutside": boolean;
        "closeOnClickOutsideAllowedId": string;
        "closeOnLinkClick": boolean;
        "disableResizing": boolean;
        "opened": boolean;
        "panelTitle": string;
        "pinable": boolean;
        "pinned": boolean;
        "triggerCommandButtonToggleId": string;
    }
    interface MylibPrimaryNavigationPanelLink {
        "selected": boolean;
        "text": string;
    }
    interface MylibPrimaryNavigationPanelSeparator {
    }
    interface MylibProgressBar {
        "errorMessage": string;
        "hint": string;
        "progress": number;
        "status": "progressing" | "paused" | "completed" | "error";
    }
    interface MylibProgressStepper {
        "currentStep": string;
        "nonInteractive": boolean;
        "orientation": 'horizontal' | 'vertical';
        "type": 'numeric' | 'text' | 'overflow';
    }
    interface MylibProgressStepperItem {
        "isOverflow": boolean;
        "label": string;
        "nonInteractive": boolean;
        "status": 'completed' | 'in-progress' | 'uncomplete';
        "stepIndex": string;
        "tooltipPosition": 'top' | 'bottom' | 'right' | 'left';
        "value": string;
    }
    interface MylibPropertyValue {
        "colon": boolean;
        "group": boolean;
        "label": string;
        "status": 'default' | 'error' | 'success' | 'warning' | 'hyperlink';
    }
    interface MylibRadioButton {
        "checked": boolean;
        "dirty": boolean;
        "disabled": boolean;
        "error": boolean;
        "isControlled": boolean;
        "label": string;
        "name": string;
        "value": string;
        "variant": 'default' | 'detailed';
    }
    interface MylibRadioGroup {
        "error": boolean;
        "errorMessage": string;
        "errorTooltip": string;
        "isControlled": boolean;
        "label": string;
        "orientation": 'horizontal' | 'vertical';
        "value": string;
        "variant": 'default' | 'detailed';
    }
    interface MylibSearchBox {
        "alternate": boolean;
        "disabled": boolean;
        "placeholder": string;
        "size": 'sm' | 'md';
        "value": string;
    }
    interface MylibSegmentedButton {
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name": string;
        "size": 'md' | 'lg';
        "value": string;
        "variant": 'list' | 'grid';
    }
    interface MylibSegmentedButtonItem {
        "description": string;
        "disabled": boolean;
        "icon": string;
        "iconSize": 'md' | 'lg';
        "iconType": 'font' | 'svg' | 'img';
        "label": string;
        "name": string;
        "select": () => Promise<void>;
        "size": 'md' | 'lg';
        "unselect": () => Promise<void>;
        "value": string;
    }
    interface MylibSlider {
        "autoMarkLabels": boolean;
        "max": number;
        "min": number;
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name": string;
        "optionsTickMarks": any[];
        "showTickMarks": boolean;
        "snapToStep": boolean;
        "step": number;
        "value": any;
        "withButtons": boolean;
    }
    interface MylibSplitter {
        "orientation": SplitterOrientation;
    }
    interface MylibSplitterItem {
        "size": number;
    }
    interface MylibSwitch {
        /**
          * If `true`, the toggle is selected.
         */
        "checked"?: boolean;
        /**
          * Sets the color scheme.
         */
        "colorScheme": ThemeColorSchemes;
        /**
          * If `true`, the user cannot interact with the toggle.
         */
        "disabled"?: boolean;
        /**
          * Property responsible for setting the label
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
    }
    interface MylibTab {
        "disabled": boolean;
        "icon": string;
        "label": string;
        "leftPaddingLess": boolean;
        "selectTab": (e?: CustomEvent) => Promise<void>;
        "selected": boolean;
        "tab": number;
        "unselectTab": (e?: CustomEvent) => Promise<void>;
        "variant": TabsetStyleVariant;
    }
    interface MylibTable {
        "activeRowIndex": number;
        "checkboxSelection": boolean;
        "colorScheme": ThemeColorSchemes;
        "columns": string;
        "config": string;
        "isCheckboxControlled": boolean;
        "source": string;
    }
    interface MylibTableHeader {
        "checkboxSelection": boolean;
        "colorScheme": ThemeColorSchemes;
        "columns": TableHeaderColumn[];
        "config": TableHeaderConfig;
        "hasRequiredAttributes": boolean;
        "tableEl": HTMLMylibTableElement;
    }
    interface MylibTableIconButton {
        "colorScheme": ThemeColorSchemes;
        "icon": string | undefined;
        "isButton": boolean;
        "size": string | undefined;
    }
    interface MylibTabset {
        "borderless": boolean;
        "moreLabel": string;
        "noPadding": boolean;
        "selectedTab": number;
        "variant": TabsetStyleVariant;
    }
    interface MylibTag {
        "closable": boolean;
        "label": string;
    }
    interface MylibTextarea {
        "alternateStyle": boolean;
        "ariaDescribedby": string;
        "autofocus": boolean;
        "dirty": boolean;
        "disabled": boolean;
        "error": boolean;
        "errorArr": any[];
        "errorMessage": string;
        "errorMessagePosition": 'bottom' | 'top';
        "hint"?: string | null;
        "inputId": string | null;
        "label": string;
        "maxlength"?: number | null;
        "name": string;
        "readonly": boolean;
        "required": boolean;
        "rows": number;
        "value"?: string | number | null;
    }
    interface MylibTimepicker {
        "disabled": boolean;
        "error": boolean;
        "hint": string;
        "label": string;
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name": string;
        /**
          * If `true`, turns the date picker dropdown visible.
          * @type {boolean}
          * @default undefined
         */
        "opened"?: boolean;
        /**
          * The current value of the date picker in a Date string format (using the function 'toJSON' from Date object).
          * @type {string}
          * @default undefined
         */
        "value"?: string;
    }
    interface MylibToast {
        "close": () => Promise<void>;
        "description": string;
        "hideCloseButton": boolean;
        "imageUrl": string;
        "noAutoClose": boolean;
        "open": () => Promise<void>;
        "opened": boolean;
        "subDescription": string;
        "toastTitle": string;
        "variant": 'primary' | 'warning' | 'error';
    }
    interface MylibTooltip {
        "delay": number;
        "hide": () => Promise<void>;
        "internalPosition": string;
        "label": string;
        "parentContainerTarget": string | HTMLElement;
        "position": 'right' | 'bottom' | 'left' | 'top';
        "show": () => Promise<void>;
        "target": string;
        "text": string;
        "variation": 'default' | 'error' | 'caution' | 'success';
    }
    interface MylibTree {
        "forceUpdate": () => Promise<void>;
        "showDottedGuideline": boolean;
    }
    interface MylibViewTable {
        "columns": Column[];
        "rowNmb": number;
    }
}
export interface MylibAccordionActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibAccordionActionElement;
}
export interface MylibAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibAccordionItemElement;
}
export interface MylibAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibAvatarElement;
}
export interface MylibBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibBreadcrumbElement;
}
export interface MylibButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibButtonElement;
}
export interface MylibCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibCheckboxElement;
}
export interface MylibCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibCheckboxGroupElement;
}
export interface MylibComboBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibComboBoxElement;
}
export interface MylibComboBoxItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibComboBoxItemElement;
}
export interface MylibCommandBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibCommandBarElement;
}
export interface MylibCommandButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibCommandButtonElement;
}
export interface MylibCommandDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibCommandDropdownElement;
}
export interface MylibCommandDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibCommandDropdownItemElement;
}
export interface MylibDatepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibDatepickerElement;
}
export interface MylibDatepickerCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibDatepickerCalendarElement;
}
export interface MylibDefaultCellCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibDefaultCellElement;
}
export interface MylibDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibDropdownElement;
}
export interface MylibDropdownMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibDropdownMenuElement;
}
export interface MylibFileUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibFileUploadElement;
}
export interface MylibFloatingButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibFloatingButtonElement;
}
export interface MylibInformationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibInformationBarElement;
}
export interface MylibInputFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibInputFieldElement;
}
export interface MylibLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibLinkElement;
}
export interface MylibMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibMenuElement;
}
export interface MylibMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibMenuItemElement;
}
export interface MylibModalDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibModalDialogElement;
}
export interface MylibPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPanelElement;
}
export interface MylibPanelSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPanelSectionElement;
}
export interface MylibPanelSectionCommandCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPanelSectionCommandElement;
}
export interface MylibPopupMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPopupMenuElement;
}
export interface MylibPrimaryNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPrimaryNavigationElement;
}
export interface MylibPrimaryNavigationBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPrimaryNavigationBarElement;
}
export interface MylibPrimaryNavigationPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPrimaryNavigationPanelElement;
}
export interface MylibPrimaryNavigationPanelLinkCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibPrimaryNavigationPanelLinkElement;
}
export interface MylibProgressStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibProgressStepperElement;
}
export interface MylibProgressStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibProgressStepperItemElement;
}
export interface MylibRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibRadioButtonElement;
}
export interface MylibRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibRadioGroupElement;
}
export interface MylibSearchBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibSearchBoxElement;
}
export interface MylibSegmentedButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibSegmentedButtonElement;
}
export interface MylibSegmentedButtonItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibSegmentedButtonItemElement;
}
export interface MylibSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibSliderElement;
}
export interface MylibSplitterItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibSplitterItemElement;
}
export interface MylibSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibSwitchElement;
}
export interface MylibTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTabElement;
}
export interface MylibTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTableElement;
}
export interface MylibTableHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTableHeaderElement;
}
export interface MylibTableIconButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTableIconButtonElement;
}
export interface MylibTabsetCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTabsetElement;
}
export interface MylibTagCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTagElement;
}
export interface MylibTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTextareaElement;
}
export interface MylibTimepickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTimepickerElement;
}
export interface MylibToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibToastElement;
}
export interface MylibTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMylibTreeElement;
}
declare global {
    interface HTMLMylibAccordionElement extends Components.MylibAccordion, HTMLStencilElement {
    }
    var HTMLMylibAccordionElement: {
        prototype: HTMLMylibAccordionElement;
        new (): HTMLMylibAccordionElement;
    };
    interface HTMLMylibAccordionActionElement extends Components.MylibAccordionAction, HTMLStencilElement {
    }
    var HTMLMylibAccordionActionElement: {
        prototype: HTMLMylibAccordionActionElement;
        new (): HTMLMylibAccordionActionElement;
    };
    interface HTMLMylibAccordionItemElement extends Components.MylibAccordionItem, HTMLStencilElement {
    }
    var HTMLMylibAccordionItemElement: {
        prototype: HTMLMylibAccordionItemElement;
        new (): HTMLMylibAccordionItemElement;
    };
    interface HTMLMylibAdvancedSearchElement extends Components.MylibAdvancedSearch, HTMLStencilElement {
    }
    var HTMLMylibAdvancedSearchElement: {
        prototype: HTMLMylibAdvancedSearchElement;
        new (): HTMLMylibAdvancedSearchElement;
    };
    interface HTMLMylibApplicationFrameElement extends Components.MylibApplicationFrame, HTMLStencilElement {
    }
    var HTMLMylibApplicationFrameElement: {
        prototype: HTMLMylibApplicationFrameElement;
        new (): HTMLMylibApplicationFrameElement;
    };
    interface HTMLMylibApplicationFrameAppNameElement extends Components.MylibApplicationFrameAppName, HTMLStencilElement {
    }
    var HTMLMylibApplicationFrameAppNameElement: {
        prototype: HTMLMylibApplicationFrameAppNameElement;
        new (): HTMLMylibApplicationFrameAppNameElement;
    };
    interface HTMLMylibAvatarElement extends Components.MylibAvatar, HTMLStencilElement {
    }
    var HTMLMylibAvatarElement: {
        prototype: HTMLMylibAvatarElement;
        new (): HTMLMylibAvatarElement;
    };
    interface HTMLMylibBreadcrumbElement extends Components.MylibBreadcrumb, HTMLStencilElement {
    }
    var HTMLMylibBreadcrumbElement: {
        prototype: HTMLMylibBreadcrumbElement;
        new (): HTMLMylibBreadcrumbElement;
    };
    interface HTMLMylibButtonElement extends Components.MylibButton, HTMLStencilElement {
    }
    var HTMLMylibButtonElement: {
        prototype: HTMLMylibButtonElement;
        new (): HTMLMylibButtonElement;
    };
    interface HTMLMylibCardElement extends Components.MylibCard, HTMLStencilElement {
    }
    var HTMLMylibCardElement: {
        prototype: HTMLMylibCardElement;
        new (): HTMLMylibCardElement;
    };
    interface HTMLMylibCardBodyElement extends Components.MylibCardBody, HTMLStencilElement {
    }
    var HTMLMylibCardBodyElement: {
        prototype: HTMLMylibCardBodyElement;
        new (): HTMLMylibCardBodyElement;
    };
    interface HTMLMylibCardHeaderElement extends Components.MylibCardHeader, HTMLStencilElement {
    }
    var HTMLMylibCardHeaderElement: {
        prototype: HTMLMylibCardHeaderElement;
        new (): HTMLMylibCardHeaderElement;
    };
    interface HTMLMylibCardSummaryElement extends Components.MylibCardSummary, HTMLStencilElement {
    }
    var HTMLMylibCardSummaryElement: {
        prototype: HTMLMylibCardSummaryElement;
        new (): HTMLMylibCardSummaryElement;
    };
    interface HTMLMylibCardTitleElement extends Components.MylibCardTitle, HTMLStencilElement {
    }
    var HTMLMylibCardTitleElement: {
        prototype: HTMLMylibCardTitleElement;
        new (): HTMLMylibCardTitleElement;
    };
    interface HTMLMylibCheckboxElement extends Components.MylibCheckbox, HTMLStencilElement {
    }
    var HTMLMylibCheckboxElement: {
        prototype: HTMLMylibCheckboxElement;
        new (): HTMLMylibCheckboxElement;
    };
    interface HTMLMylibCheckboxGroupElement extends Components.MylibCheckboxGroup, HTMLStencilElement {
    }
    var HTMLMylibCheckboxGroupElement: {
        prototype: HTMLMylibCheckboxGroupElement;
        new (): HTMLMylibCheckboxGroupElement;
    };
    interface HTMLMylibComboBoxElement extends Components.MylibComboBox, HTMLStencilElement {
    }
    var HTMLMylibComboBoxElement: {
        prototype: HTMLMylibComboBoxElement;
        new (): HTMLMylibComboBoxElement;
    };
    interface HTMLMylibComboBoxItemElement extends Components.MylibComboBoxItem, HTMLStencilElement {
    }
    var HTMLMylibComboBoxItemElement: {
        prototype: HTMLMylibComboBoxItemElement;
        new (): HTMLMylibComboBoxItemElement;
    };
    interface HTMLMylibCommandBarElement extends Components.MylibCommandBar, HTMLStencilElement {
    }
    var HTMLMylibCommandBarElement: {
        prototype: HTMLMylibCommandBarElement;
        new (): HTMLMylibCommandBarElement;
    };
    interface HTMLMylibCommandButtonElement extends Components.MylibCommandButton, HTMLStencilElement {
    }
    var HTMLMylibCommandButtonElement: {
        prototype: HTMLMylibCommandButtonElement;
        new (): HTMLMylibCommandButtonElement;
    };
    interface HTMLMylibCommandDropdownElement extends Components.MylibCommandDropdown, HTMLStencilElement {
    }
    var HTMLMylibCommandDropdownElement: {
        prototype: HTMLMylibCommandDropdownElement;
        new (): HTMLMylibCommandDropdownElement;
    };
    interface HTMLMylibCommandDropdownItemElement extends Components.MylibCommandDropdownItem, HTMLStencilElement {
    }
    var HTMLMylibCommandDropdownItemElement: {
        prototype: HTMLMylibCommandDropdownItemElement;
        new (): HTMLMylibCommandDropdownItemElement;
    };
    interface HTMLMylibCommandPipeElement extends Components.MylibCommandPipe, HTMLStencilElement {
    }
    var HTMLMylibCommandPipeElement: {
        prototype: HTMLMylibCommandPipeElement;
        new (): HTMLMylibCommandPipeElement;
    };
    interface HTMLMylibDatepickerElement extends Components.MylibDatepicker, HTMLStencilElement {
    }
    var HTMLMylibDatepickerElement: {
        prototype: HTMLMylibDatepickerElement;
        new (): HTMLMylibDatepickerElement;
    };
    /**
     * @class DatepickerCalendar
     * The DatepickerCalendar component is responsible for rendering a datepicker calendar
     * and handling user interactions with the calendar.
     */
    interface HTMLMylibDatepickerCalendarElement extends Components.MylibDatepickerCalendar, HTMLStencilElement {
    }
    var HTMLMylibDatepickerCalendarElement: {
        prototype: HTMLMylibDatepickerCalendarElement;
        new (): HTMLMylibDatepickerCalendarElement;
    };
    interface HTMLMylibDefaultCellElement extends Components.MylibDefaultCell, HTMLStencilElement {
    }
    var HTMLMylibDefaultCellElement: {
        prototype: HTMLMylibDefaultCellElement;
        new (): HTMLMylibDefaultCellElement;
    };
    interface HTMLMylibDefaultCellGroupElement extends Components.MylibDefaultCellGroup, HTMLStencilElement {
    }
    var HTMLMylibDefaultCellGroupElement: {
        prototype: HTMLMylibDefaultCellGroupElement;
        new (): HTMLMylibDefaultCellGroupElement;
    };
    interface HTMLMylibDropdownElement extends Components.MylibDropdown, HTMLStencilElement {
    }
    var HTMLMylibDropdownElement: {
        prototype: HTMLMylibDropdownElement;
        new (): HTMLMylibDropdownElement;
    };
    /**
     * DEPRECATED Dropdown Component
     * @date 9/14/2022
     * @deprecated Use  mylib-dropdown instead.
     */
    interface HTMLMylibDropdownMenuElement extends Components.MylibDropdownMenu, HTMLStencilElement {
    }
    var HTMLMylibDropdownMenuElement: {
        prototype: HTMLMylibDropdownMenuElement;
        new (): HTMLMylibDropdownMenuElement;
    };
    /**
     * Component for uploading files.
     * @fires fileRejected - Fired when a file cannot be added to the queue due to a constrain: file-size, file-type or maxFiles
     * @fires uploadStarting - Fired before the XHR is opened. Could be used for changing the request URL. If the default is prevented, then XHR would not be opened.
     * @fires uploadStarted - Fired when the XHR is sent.
     * @fires uploadSending - Fired when the XHR has been opened but not sent yet.
     * @fires uploadError - Fired in case the upload process failed.
     * @fires uploadProgress - Fired as many times as the progress is updated.
     * @fires uploadAbort - Fired when retry abort is requested. If the default is prevented, then the file upload would not be aborted.
     * @fires uploadCompleted - Fired in case the upload process succeed.
     */
    interface HTMLMylibFileUploadElement extends Components.MylibFileUpload, HTMLStencilElement {
    }
    var HTMLMylibFileUploadElement: {
        prototype: HTMLMylibFileUploadElement;
        new (): HTMLMylibFileUploadElement;
    };
    interface HTMLMylibFloatingButtonElement extends Components.MylibFloatingButton, HTMLStencilElement {
    }
    var HTMLMylibFloatingButtonElement: {
        prototype: HTMLMylibFloatingButtonElement;
        new (): HTMLMylibFloatingButtonElement;
    };
    /**
     * DEPRECATED Global Frame Component
     * @date 6/29/2022
     * @deprecated Use  mylib-application-frame instead.
     */
    interface HTMLMylibGlobalFrameElement extends Components.MylibGlobalFrame, HTMLStencilElement {
    }
    var HTMLMylibGlobalFrameElement: {
        prototype: HTMLMylibGlobalFrameElement;
        new (): HTMLMylibGlobalFrameElement;
    };
    interface HTMLMylibGlobalFrameAppNameElement extends Components.MylibGlobalFrameAppName, HTMLStencilElement {
    }
    var HTMLMylibGlobalFrameAppNameElement: {
        prototype: HTMLMylibGlobalFrameAppNameElement;
        new (): HTMLMylibGlobalFrameAppNameElement;
    };
    interface HTMLMylibIconElement extends Components.MylibIcon, HTMLStencilElement {
    }
    var HTMLMylibIconElement: {
        prototype: HTMLMylibIconElement;
        new (): HTMLMylibIconElement;
    };
    interface HTMLMylibInformationBarElement extends Components.MylibInformationBar, HTMLStencilElement {
    }
    var HTMLMylibInformationBarElement: {
        prototype: HTMLMylibInformationBarElement;
        new (): HTMLMylibInformationBarElement;
    };
    interface HTMLMylibInputFieldElement extends Components.MylibInputField, HTMLStencilElement {
    }
    var HTMLMylibInputFieldElement: {
        prototype: HTMLMylibInputFieldElement;
        new (): HTMLMylibInputFieldElement;
    };
    /**
     * DEPRECATED Label Component
     * @date 6/29/2022
     * @deprecated Use  mylib-property-value instead.
     */
    interface HTMLMylibLabelElement extends Components.MylibLabel, HTMLStencilElement {
    }
    var HTMLMylibLabelElement: {
        prototype: HTMLMylibLabelElement;
        new (): HTMLMylibLabelElement;
    };
    interface HTMLMylibLinkElement extends Components.MylibLink, HTMLStencilElement {
    }
    var HTMLMylibLinkElement: {
        prototype: HTMLMylibLinkElement;
        new (): HTMLMylibLinkElement;
    };
    interface HTMLMylibLoadingIndicatorElement extends Components.MylibLoadingIndicator, HTMLStencilElement {
    }
    var HTMLMylibLoadingIndicatorElement: {
        prototype: HTMLMylibLoadingIndicatorElement;
        new (): HTMLMylibLoadingIndicatorElement;
    };
    interface HTMLMylibLogoElement extends Components.MylibLogo, HTMLStencilElement {
    }
    var HTMLMylibLogoElement: {
        prototype: HTMLMylibLogoElement;
        new (): HTMLMylibLogoElement;
    };
    interface HTMLMylibMenuElement extends Components.MylibMenu, HTMLStencilElement {
    }
    var HTMLMylibMenuElement: {
        prototype: HTMLMylibMenuElement;
        new (): HTMLMylibMenuElement;
    };
    interface HTMLMylibMenuItemElement extends Components.MylibMenuItem, HTMLStencilElement {
    }
    var HTMLMylibMenuItemElement: {
        prototype: HTMLMylibMenuItemElement;
        new (): HTMLMylibMenuItemElement;
    };
    interface HTMLMylibModalDialogElement extends Components.MylibModalDialog, HTMLStencilElement {
    }
    var HTMLMylibModalDialogElement: {
        prototype: HTMLMylibModalDialogElement;
        new (): HTMLMylibModalDialogElement;
    };
    interface HTMLMylibNotificationBadgeElement extends Components.MylibNotificationBadge, HTMLStencilElement {
    }
    var HTMLMylibNotificationBadgeElement: {
        prototype: HTMLMylibNotificationBadgeElement;
        new (): HTMLMylibNotificationBadgeElement;
    };
    interface HTMLMylibPanelElement extends Components.MylibPanel, HTMLStencilElement {
    }
    var HTMLMylibPanelElement: {
        prototype: HTMLMylibPanelElement;
        new (): HTMLMylibPanelElement;
    };
    interface HTMLMylibPanelBodyElement extends Components.MylibPanelBody, HTMLStencilElement {
    }
    var HTMLMylibPanelBodyElement: {
        prototype: HTMLMylibPanelBodyElement;
        new (): HTMLMylibPanelBodyElement;
    };
    interface HTMLMylibPanelFooterElement extends Components.MylibPanelFooter, HTMLStencilElement {
    }
    var HTMLMylibPanelFooterElement: {
        prototype: HTMLMylibPanelFooterElement;
        new (): HTMLMylibPanelFooterElement;
    };
    interface HTMLMylibPanelSectionElement extends Components.MylibPanelSection, HTMLStencilElement {
    }
    var HTMLMylibPanelSectionElement: {
        prototype: HTMLMylibPanelSectionElement;
        new (): HTMLMylibPanelSectionElement;
    };
    interface HTMLMylibPanelSectionCommandElement extends Components.MylibPanelSectionCommand, HTMLStencilElement {
    }
    var HTMLMylibPanelSectionCommandElement: {
        prototype: HTMLMylibPanelSectionCommandElement;
        new (): HTMLMylibPanelSectionCommandElement;
    };
    interface HTMLMylibPopupMenuElement extends Components.MylibPopupMenu, HTMLStencilElement {
    }
    var HTMLMylibPopupMenuElement: {
        prototype: HTMLMylibPopupMenuElement;
        new (): HTMLMylibPopupMenuElement;
    };
    /**
     * DEPRECATED Dropdown Component
     * @date 7/27/2023
     * @deprecated Use mylib-primary-navigation-bar instead.
     */
    interface HTMLMylibPrimaryNavigationElement extends Components.MylibPrimaryNavigation, HTMLStencilElement {
    }
    var HTMLMylibPrimaryNavigationElement: {
        prototype: HTMLMylibPrimaryNavigationElement;
        new (): HTMLMylibPrimaryNavigationElement;
    };
    interface HTMLMylibPrimaryNavigationBarElement extends Components.MylibPrimaryNavigationBar, HTMLStencilElement {
    }
    var HTMLMylibPrimaryNavigationBarElement: {
        prototype: HTMLMylibPrimaryNavigationBarElement;
        new (): HTMLMylibPrimaryNavigationBarElement;
    };
    interface HTMLMylibPrimaryNavigationPanelElement extends Components.MylibPrimaryNavigationPanel, HTMLStencilElement {
    }
    var HTMLMylibPrimaryNavigationPanelElement: {
        prototype: HTMLMylibPrimaryNavigationPanelElement;
        new (): HTMLMylibPrimaryNavigationPanelElement;
    };
    interface HTMLMylibPrimaryNavigationPanelLinkElement extends Components.MylibPrimaryNavigationPanelLink, HTMLStencilElement {
    }
    var HTMLMylibPrimaryNavigationPanelLinkElement: {
        prototype: HTMLMylibPrimaryNavigationPanelLinkElement;
        new (): HTMLMylibPrimaryNavigationPanelLinkElement;
    };
    interface HTMLMylibPrimaryNavigationPanelSeparatorElement extends Components.MylibPrimaryNavigationPanelSeparator, HTMLStencilElement {
    }
    var HTMLMylibPrimaryNavigationPanelSeparatorElement: {
        prototype: HTMLMylibPrimaryNavigationPanelSeparatorElement;
        new (): HTMLMylibPrimaryNavigationPanelSeparatorElement;
    };
    interface HTMLMylibProgressBarElement extends Components.MylibProgressBar, HTMLStencilElement {
    }
    var HTMLMylibProgressBarElement: {
        prototype: HTMLMylibProgressBarElement;
        new (): HTMLMylibProgressBarElement;
    };
    interface HTMLMylibProgressStepperElement extends Components.MylibProgressStepper, HTMLStencilElement {
    }
    var HTMLMylibProgressStepperElement: {
        prototype: HTMLMylibProgressStepperElement;
        new (): HTMLMylibProgressStepperElement;
    };
    interface HTMLMylibProgressStepperItemElement extends Components.MylibProgressStepperItem, HTMLStencilElement {
    }
    var HTMLMylibProgressStepperItemElement: {
        prototype: HTMLMylibProgressStepperItemElement;
        new (): HTMLMylibProgressStepperItemElement;
    };
    interface HTMLMylibPropertyValueElement extends Components.MylibPropertyValue, HTMLStencilElement {
    }
    var HTMLMylibPropertyValueElement: {
        prototype: HTMLMylibPropertyValueElement;
        new (): HTMLMylibPropertyValueElement;
    };
    interface HTMLMylibRadioButtonElement extends Components.MylibRadioButton, HTMLStencilElement {
    }
    var HTMLMylibRadioButtonElement: {
        prototype: HTMLMylibRadioButtonElement;
        new (): HTMLMylibRadioButtonElement;
    };
    interface HTMLMylibRadioGroupElement extends Components.MylibRadioGroup, HTMLStencilElement {
    }
    var HTMLMylibRadioGroupElement: {
        prototype: HTMLMylibRadioGroupElement;
        new (): HTMLMylibRadioGroupElement;
    };
    interface HTMLMylibSearchBoxElement extends Components.MylibSearchBox, HTMLStencilElement {
    }
    var HTMLMylibSearchBoxElement: {
        prototype: HTMLMylibSearchBoxElement;
        new (): HTMLMylibSearchBoxElement;
    };
    interface HTMLMylibSegmentedButtonElement extends Components.MylibSegmentedButton, HTMLStencilElement {
    }
    var HTMLMylibSegmentedButtonElement: {
        prototype: HTMLMylibSegmentedButtonElement;
        new (): HTMLMylibSegmentedButtonElement;
    };
    interface HTMLMylibSegmentedButtonItemElement extends Components.MylibSegmentedButtonItem, HTMLStencilElement {
    }
    var HTMLMylibSegmentedButtonItemElement: {
        prototype: HTMLMylibSegmentedButtonItemElement;
        new (): HTMLMylibSegmentedButtonItemElement;
    };
    interface HTMLMylibSliderElement extends Components.MylibSlider, HTMLStencilElement {
    }
    var HTMLMylibSliderElement: {
        prototype: HTMLMylibSliderElement;
        new (): HTMLMylibSliderElement;
    };
    interface HTMLMylibSplitterElement extends Components.MylibSplitter, HTMLStencilElement {
    }
    var HTMLMylibSplitterElement: {
        prototype: HTMLMylibSplitterElement;
        new (): HTMLMylibSplitterElement;
    };
    interface HTMLMylibSplitterItemElement extends Components.MylibSplitterItem, HTMLStencilElement {
    }
    var HTMLMylibSplitterItemElement: {
        prototype: HTMLMylibSplitterItemElement;
        new (): HTMLMylibSplitterItemElement;
    };
    interface HTMLMylibSwitchElement extends Components.MylibSwitch, HTMLStencilElement {
    }
    var HTMLMylibSwitchElement: {
        prototype: HTMLMylibSwitchElement;
        new (): HTMLMylibSwitchElement;
    };
    interface HTMLMylibTabElement extends Components.MylibTab, HTMLStencilElement {
    }
    var HTMLMylibTabElement: {
        prototype: HTMLMylibTabElement;
        new (): HTMLMylibTabElement;
    };
    interface HTMLMylibTableElement extends Components.MylibTable, HTMLStencilElement {
    }
    var HTMLMylibTableElement: {
        prototype: HTMLMylibTableElement;
        new (): HTMLMylibTableElement;
    };
    interface HTMLMylibTableHeaderElement extends Components.MylibTableHeader, HTMLStencilElement {
    }
    var HTMLMylibTableHeaderElement: {
        prototype: HTMLMylibTableHeaderElement;
        new (): HTMLMylibTableHeaderElement;
    };
    interface HTMLMylibTableIconButtonElement extends Components.MylibTableIconButton, HTMLStencilElement {
    }
    var HTMLMylibTableIconButtonElement: {
        prototype: HTMLMylibTableIconButtonElement;
        new (): HTMLMylibTableIconButtonElement;
    };
    interface HTMLMylibTabsetElement extends Components.MylibTabset, HTMLStencilElement {
    }
    var HTMLMylibTabsetElement: {
        prototype: HTMLMylibTabsetElement;
        new (): HTMLMylibTabsetElement;
    };
    interface HTMLMylibTagElement extends Components.MylibTag, HTMLStencilElement {
    }
    var HTMLMylibTagElement: {
        prototype: HTMLMylibTagElement;
        new (): HTMLMylibTagElement;
    };
    interface HTMLMylibTextareaElement extends Components.MylibTextarea, HTMLStencilElement {
    }
    var HTMLMylibTextareaElement: {
        prototype: HTMLMylibTextareaElement;
        new (): HTMLMylibTextareaElement;
    };
    interface HTMLMylibTimepickerElement extends Components.MylibTimepicker, HTMLStencilElement {
    }
    var HTMLMylibTimepickerElement: {
        prototype: HTMLMylibTimepickerElement;
        new (): HTMLMylibTimepickerElement;
    };
    interface HTMLMylibToastElement extends Components.MylibToast, HTMLStencilElement {
    }
    var HTMLMylibToastElement: {
        prototype: HTMLMylibToastElement;
        new (): HTMLMylibToastElement;
    };
    interface HTMLMylibTooltipElement extends Components.MylibTooltip, HTMLStencilElement {
    }
    var HTMLMylibTooltipElement: {
        prototype: HTMLMylibTooltipElement;
        new (): HTMLMylibTooltipElement;
    };
    interface HTMLMylibTreeElement extends Components.MylibTree, HTMLStencilElement {
    }
    var HTMLMylibTreeElement: {
        prototype: HTMLMylibTreeElement;
        new (): HTMLMylibTreeElement;
    };
    interface HTMLMylibViewTableElement extends Components.MylibViewTable, HTMLStencilElement {
    }
    var HTMLMylibViewTableElement: {
        prototype: HTMLMylibViewTableElement;
        new (): HTMLMylibViewTableElement;
    };
    interface HTMLElementTagNameMap {
        "mylib-accordion": HTMLMylibAccordionElement;
        "mylib-accordion-action": HTMLMylibAccordionActionElement;
        "mylib-accordion-item": HTMLMylibAccordionItemElement;
        "mylib-advanced-search": HTMLMylibAdvancedSearchElement;
        "mylib-application-frame": HTMLMylibApplicationFrameElement;
        "mylib-application-frame-app-name": HTMLMylibApplicationFrameAppNameElement;
        "mylib-avatar": HTMLMylibAvatarElement;
        "mylib-breadcrumb": HTMLMylibBreadcrumbElement;
        "mylib-button": HTMLMylibButtonElement;
        "mylib-card": HTMLMylibCardElement;
        "mylib-card-body": HTMLMylibCardBodyElement;
        "mylib-card-header": HTMLMylibCardHeaderElement;
        "mylib-card-summary": HTMLMylibCardSummaryElement;
        "mylib-card-title": HTMLMylibCardTitleElement;
        "mylib-checkbox": HTMLMylibCheckboxElement;
        "mylib-checkbox-group": HTMLMylibCheckboxGroupElement;
        "mylib-combo-box": HTMLMylibComboBoxElement;
        "mylib-combo-box-item": HTMLMylibComboBoxItemElement;
        "mylib-command-bar": HTMLMylibCommandBarElement;
        "mylib-command-button": HTMLMylibCommandButtonElement;
        "mylib-command-dropdown": HTMLMylibCommandDropdownElement;
        "mylib-command-dropdown-item": HTMLMylibCommandDropdownItemElement;
        "mylib-command-pipe": HTMLMylibCommandPipeElement;
        "mylib-datepicker": HTMLMylibDatepickerElement;
        "mylib-datepicker-calendar": HTMLMylibDatepickerCalendarElement;
        "mylib-default-cell": HTMLMylibDefaultCellElement;
        "mylib-default-cell-group": HTMLMylibDefaultCellGroupElement;
        "mylib-dropdown": HTMLMylibDropdownElement;
        "mylib-dropdown-menu": HTMLMylibDropdownMenuElement;
        "mylib-file-upload": HTMLMylibFileUploadElement;
        "mylib-floating-button": HTMLMylibFloatingButtonElement;
        "mylib-global-frame": HTMLMylibGlobalFrameElement;
        "mylib-global-frame-app-name": HTMLMylibGlobalFrameAppNameElement;
        "mylib-icon": HTMLMylibIconElement;
        "mylib-information-bar": HTMLMylibInformationBarElement;
        "mylib-input-field": HTMLMylibInputFieldElement;
        "mylib-label": HTMLMylibLabelElement;
        "mylib-link": HTMLMylibLinkElement;
        "mylib-loading-indicator": HTMLMylibLoadingIndicatorElement;
        "mylib-logo": HTMLMylibLogoElement;
        "mylib-menu": HTMLMylibMenuElement;
        "mylib-menu-item": HTMLMylibMenuItemElement;
        "mylib-modal-dialog": HTMLMylibModalDialogElement;
        "mylib-notification-badge": HTMLMylibNotificationBadgeElement;
        "mylib-panel": HTMLMylibPanelElement;
        "mylib-panel-body": HTMLMylibPanelBodyElement;
        "mylib-panel-footer": HTMLMylibPanelFooterElement;
        "mylib-panel-section": HTMLMylibPanelSectionElement;
        "mylib-panel-section-command": HTMLMylibPanelSectionCommandElement;
        "mylib-popup-menu": HTMLMylibPopupMenuElement;
        "mylib-primary-navigation": HTMLMylibPrimaryNavigationElement;
        "mylib-primary-navigation-bar": HTMLMylibPrimaryNavigationBarElement;
        "mylib-primary-navigation-panel": HTMLMylibPrimaryNavigationPanelElement;
        "mylib-primary-navigation-panel-link": HTMLMylibPrimaryNavigationPanelLinkElement;
        "mylib-primary-navigation-panel-separator": HTMLMylibPrimaryNavigationPanelSeparatorElement;
        "mylib-progress-bar": HTMLMylibProgressBarElement;
        "mylib-progress-stepper": HTMLMylibProgressStepperElement;
        "mylib-progress-stepper-item": HTMLMylibProgressStepperItemElement;
        "mylib-property-value": HTMLMylibPropertyValueElement;
        "mylib-radio-button": HTMLMylibRadioButtonElement;
        "mylib-radio-group": HTMLMylibRadioGroupElement;
        "mylib-search-box": HTMLMylibSearchBoxElement;
        "mylib-segmented-button": HTMLMylibSegmentedButtonElement;
        "mylib-segmented-button-item": HTMLMylibSegmentedButtonItemElement;
        "mylib-slider": HTMLMylibSliderElement;
        "mylib-splitter": HTMLMylibSplitterElement;
        "mylib-splitter-item": HTMLMylibSplitterItemElement;
        "mylib-switch": HTMLMylibSwitchElement;
        "mylib-tab": HTMLMylibTabElement;
        "mylib-table": HTMLMylibTableElement;
        "mylib-table-header": HTMLMylibTableHeaderElement;
        "mylib-table-icon-button": HTMLMylibTableIconButtonElement;
        "mylib-tabset": HTMLMylibTabsetElement;
        "mylib-tag": HTMLMylibTagElement;
        "mylib-textarea": HTMLMylibTextareaElement;
        "mylib-timepicker": HTMLMylibTimepickerElement;
        "mylib-toast": HTMLMylibToastElement;
        "mylib-tooltip": HTMLMylibTooltipElement;
        "mylib-tree": HTMLMylibTreeElement;
        "mylib-view-table": HTMLMylibViewTableElement;
    }
}
declare namespace LocalJSX {
    interface MylibAccordion {
        /**
          * Sets or gets the expand mode. Expand mode determines how the items will expand or collapse.
         */
        "expandMode"?: AccordionExpandModes;
        /**
          * Sets Accordion style variation
         */
        "variant"?: AccordionVariants;
    }
    interface MylibAccordionAction {
        /**
          * Enables or disables the action.
         */
        "disabled"?: boolean;
        /**
          * Set the action icon.
         */
        "icon"?: string;
        /**
          * Event triggered when the action is clicked.
         */
        "onClicked"?: (event: MylibAccordionActionCustomEvent<any>) => void;
        /**
          * Event triggered when a key is pressed over the action.
         */
        "onKeyPressed"?: (event: MylibAccordionActionCustomEvent<any>) => void;
    }
    interface MylibAccordionItem {
        /**
          * True if the item should be disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets or gets the expanded state.
         */
        "expanded"?: boolean;
        /**
          * Set a position to the header tooltip
          * @type {string}
         */
        "headerTooltipPosition"?: 'right' | 'bottom' | 'left' | 'top';
        /**
          * Set a text to the header tooltip
          * @type {string}
         */
        "headerTooltipText"?: string;
        /**
          * True if collapse icon should be hidden
         */
        "hideCollapseIcon"?: boolean;
        /**
          * Sets or gets the label for the item.
         */
        "label"?: string;
        /**
          * True if the item is placed into another Accordion Item (It's set automacatically by the parent Accordion component at "Load" lifecycle).
         */
        "nested"?: boolean;
        /**
          * True if slot content should not have padding
         */
        "noContentPadding"?: boolean;
        /**
          * This event is triggered when an item is expanded or collapsed.
         */
        "onToggled"?: (event: MylibAccordionItemCustomEvent<any>) => void;
        /**
          * Sets Accordion style variation.
         */
        "variant"?: AccordionVariants;
    }
    interface MylibAdvancedSearch {
        "searchInitialValue"?: string;
        "searchPlaceholder"?: string;
    }
    interface MylibApplicationFrame {
        "appName"?: string;
    }
    interface MylibApplicationFrameAppName {
        "appName"?: string;
    }
    interface MylibAvatar {
        "firstName"?: string | null;
        "hasLabel"?: boolean;
        "imageUrl"?: string | null;
        "labelPosition"?: 'row' | 'column';
        "lastName"?: string | null;
        "onAvatarClicked"?: (event: MylibAvatarCustomEvent<any>) => void;
        "size"?: AvatarOptionSizesListTypes;
        "tooltip"?: string | null;
    }
    interface MylibBreadcrumb {
        "compactMode"?: boolean;
        "compactModeExpanded"?: boolean;
        "compactModeTitle"?: string;
        "currentPageClickEnabled"?: boolean;
        "hideCurrentPageHighlight"?: boolean;
        "items"?: string;
        "label"?: string | undefined;
        "onCompactModeExpandedChange"?: (event: MylibBreadcrumbCustomEvent<any>) => void;
        "onItemClick"?: (event: MylibBreadcrumbCustomEvent<{
    srcEvent: PointerEvent;
    itemData: unknown;
  }>) => void;
        "variant"?: "base";
    }
    interface MylibButton {
        /**
          * The current button color scheme (light/dark).
         */
        "colorScheme"?: ThemeColorSchemes;
        /**
          * If true, the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * The icon name to include in the button.
         */
        "icon"?: string;
        /**
          * The position to align the icon to, relative to the button label.
         */
        "iconPosition"?: ButtonIconPositions;
        /**
          * The size of the icon contained in the button
         */
        "iconSize"?: ButtonIconSizes;
        /**
          * The icon type to include in the button.
         */
        "iconType"?: string;
        /**
          * The button's text label.
         */
        "label"?: string;
        /**
          * Custom event for when the button is clicked.
         */
        "onClickEvent"?: (event: MylibButtonCustomEvent<any>) => void;
        /**
          * The size of the button.
         */
        "size"?: ButtonSizes;
        /**
          * Sets the button state as pressed/active.
         */
        "toggled"?: boolean;
        /**
          * The type of the button.
         */
        "type"?: ButtonTypes;
        /**
          * The style variant of the button.
         */
        "variant"?: ButtonVariants;
    }
    interface MylibCard {
        "error"?: boolean;
        "isDraggable"?: boolean;
        "layout"?: 'default' | 'reverse' | 'horizontal' | 'reverse-horizontal';
        "nonInteractive"?: boolean;
        "rel"?: string | undefined;
        "selectable"?: boolean;
        "selected"?: boolean;
        "summaryText"?: string;
        "target"?: string;
        "titleAlign"?: 'left' | 'center' | 'right';
        "titleText"?: string;
        "url"?: string;
    }
    interface MylibCardBody {
        "summaryText"?: string;
        "titleAlign"?: 'left' | 'center' | 'right';
        "titleText"?: string;
    }
    interface MylibCardHeader {
        "titleAlign"?: 'left' | 'center' | 'right';
        "titleText"?: string;
    }
    interface MylibCardSummary {
        "text"?: string;
    }
    interface MylibCardTitle {
        "text"?: string;
    }
    interface MylibCheckbox {
        "checked"?: boolean;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        "indeterminate"?: boolean;
        "isControlled"?: boolean;
        "label"?: string;
        "name"?: string;
        "onCheckChanged"?: (event: MylibCheckboxCustomEvent<any>) => void;
        "value"?: string;
    }
    interface MylibCheckboxGroup {
        "dirty"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "errorTooltip"?: string;
        "items"?: string;
        "itemsListType"?: CheckboxGroupItemsListTypes;
        "label"?: string;
        "name"?: string;
        "onAllItemsSelectedChanged"?: (event: MylibCheckboxGroupCustomEvent<any>) => void;
        "onIndeterminateChanged"?: (event: MylibCheckboxGroupCustomEvent<any>) => void;
        "onSelectionChanged"?: (event: MylibCheckboxGroupCustomEvent<any>) => void;
        "showSelectAllItems"?: boolean;
    }
    interface MylibComboBox {
        "disableTruncated"?: boolean;
        "items"?: IMylibComboBoxItem[] | string;
        "label"?: string;
        "onOpenedChange"?: (event: MylibComboBoxCustomEvent<string>) => void;
        "onValueChange"?: (event: MylibComboBoxCustomEvent<string>) => void;
        "opened"?: boolean;
        "placeholder"?: string;
        "value"?: string;
    }
    interface MylibComboBoxItem {
        "checked"?: boolean;
        "onSelectedItem"?: (event: MylibComboBoxItemCustomEvent<any>) => void;
        "text"?: string;
        "value"?: string;
    }
    interface MylibCommandBar {
        "borderless"?: boolean;
        "iconLarge"?: boolean;
        "onIconSizeChanged"?: (event: MylibCommandBarCustomEvent<any>) => void;
        "onMylibCommandOrientationChanged"?: (event: MylibCommandBarCustomEvent<any>) => void;
        "orientation"?: 'horizontal' | 'vertical';
        "shadowPosition"?: 'left' | 'none';
    }
    interface MylibCommandButton {
        "colorScheme"?: ThemeColorSchemes;
        "disabled"?: boolean;
        "hiddenLabel"?: boolean;
        "icon"?: string;
        "iconSize"?: 'md' | 'lg';
        "iconType"?: 'font' | 'svg';
        "isToggle"?: boolean;
        "label"?: string;
        "onClickEvent"?: (event: MylibCommandButtonCustomEvent<any>) => void;
        "onClickingEvent"?: (event: MylibCommandButtonCustomEvent<any>) => void;
        "onToggledChange"?: (event: MylibCommandButtonCustomEvent<any>) => void;
        "orientation"?: 'horizontal' | 'vertical';
        "toggled"?: boolean;
    }
    interface MylibCommandDropdown {
        "disabled"?: boolean;
        "hiddenLabel"?: boolean;
        "icon"?: string;
        "iconSize"?: 'md' | 'lg';
        "label"?: string;
        "onClickEvent"?: (event: MylibCommandDropdownCustomEvent<any>) => void;
        "onOpenedChanged"?: (event: MylibCommandDropdownCustomEvent<any>) => void;
        "opened"?: boolean;
        "orientation"?: 'horizontal' | 'vertical';
        "toggled"?: boolean;
    }
    interface MylibCommandDropdownItem {
        "disabled"?: boolean;
        "hiddenLabel"?: boolean;
        "icon"?: string;
        "iconSize"?: 'md' | 'lg';
        "label"?: string;
        "onClickEvent"?: (event: MylibCommandDropdownItemCustomEvent<any>) => void;
    }
    interface MylibCommandPipe {
    }
    interface MylibDatepicker {
        /**
          * If `true`, the date picker is disabled and cannot be interacted with.
          * @type {boolean}
          * @default false
         */
        "disabled"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        /**
          * If `true`, hide the hint displaying input format above the input.
          * @type {boolean}
          * @default false
         */
        "hideHint"?: boolean;
        /**
          * If `true`, hide the tooltip displaying text 'Click to edit' over the input.
          * @type {boolean}
          * @default false
         */
        "hideTooltip"?: boolean;
        /**
          * The format of the date mask in the input field.
          * @type {string}
          * @default 'MM-DD-YYYY'
         */
        "inputFormat"?: string;
        /**
          * The label associated with the date picker input field.
          * @type {string}
          * @default 'Date'
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name"?: string;
        /**
          * Event emitted when the opened state of the date picker changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onOpenedChange"?: (event: MylibDatepickerCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        /**
          * Event emitted when the value of the date picker changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onValueChange"?: (event: MylibDatepickerCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        /**
          * If `true`, turns the date picker dropdown visible.
          * @type {boolean}
          * @default undefined
         */
        "opened"?: boolean;
        /**
          * The current value of the date picker in a Date string format (using the function 'toJSON' from Date object).
          * @type {string}
          * @default undefined
         */
        "value"?: string;
    }
    /**
     * @class DatepickerCalendar
     * The DatepickerCalendar component is responsible for rendering a datepicker calendar
     * and handling user interactions with the calendar.
     */
    interface MylibDatepickerCalendar {
        /**
          * The format of the date mask in the input field.
          * @type {string}
          * @default 'MM-DD-YYYY'
         */
        "inputFormat"?: string;
        /**
          * Event emitted when the value of the date picker changes.
          * @event valueChange
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onValueChange"?: (event: MylibDatepickerCalendarCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        /**
          * The current value in a Date string format (using the function 'toJSON' from Date object).
          * @type {string}
          * @default undefined
         */
        "value"?: string;
    }
    interface MylibDefaultCell {
        "cellTitle"?: string;
        "density"?: 'cozy' | 'compact';
        "description"?: string;
        "grayish"?: boolean;
        "imgAlt"?: string;
        "imgSrc"?: string;
        "onSelectChanged"?: (event: MylibDefaultCellCustomEvent<any>) => void;
        "selectable"?: boolean;
        "selected"?: boolean;
        "subTitle"?: string;
    }
    interface MylibDefaultCellGroup {
        /**
          * Cell density layout mode, apply to all direct child cells.
         */
        "cellDensity"?: 'cozy' | 'compact';
        "expanded"?: boolean;
        /**
          * Group Cell title text.
         */
        "groupTitle"?: string;
    }
    interface MylibDropdown {
        "clearAllLabel"?: string;
        "customSortFunc"?: (a: MylibDropDownMenuOptionItem, b: MylibDropDownMenuOptionItem) => number | undefined;
        "dirty"?: boolean;
        "enableClearAll"?: boolean;
        "enableDirtyState"?: boolean;
        "enableSelectAll"?: boolean;
        "error"?: boolean;
        "errorMessage"?: string;
        "errorMessagePosition"?: 'bottom' | 'top';
        "hint"?: string;
        /**
          * @date 2/23/2023
          * @deprecated initialValue is not necessary anymore, you can replace it by the controlled attribute 'value', this attribute needs to set as an array
         */
        "initialValue"?: string | string[];
        "itemsCount"?: number;
        "label"?: string;
        "loading"?: boolean;
        "notTruncateOptionDescription"?: boolean;
        "onClearAllClick"?: (event: MylibDropdownCustomEvent<any>) => void;
        "onDropdownClose"?: (event: MylibDropdownCustomEvent<any>) => void;
        "onDropdownOpen"?: (event: MylibDropdownCustomEvent<any>) => void;
        "onOpenedChange"?: (event: MylibDropdownCustomEvent<any>) => void;
        "onSelectAllClick"?: (event: MylibDropdownCustomEvent<any>) => void;
        "onValueChange"?: (event: MylibDropdownCustomEvent<any>) => void;
        "opened"?: boolean;
        "options"?: MylibDropDownMenuOptionItem[];
        /**
          * @date 9/9/2022
          * @deprecated Use the property options instead
         */
        "optionsList"?: MylibDropDownMenuOptionItem[];
        "placeholder"?: string;
        "placeholderIcon"?: string;
        "required"?: boolean;
        "selectAllLabel"?: string;
        "selectionMode"?: 'single' | 'multiple';
        "sortOptions"?: boolean;
        "transformTitle"?: (title: string, value: string[]) => string;
        /**
          * @date 9/9/2022
          * @deprecated the need for description will be inferred by the item object in the options list
         */
        "truncateDescription"?: boolean;
        "value"?: string[];
        /**
          * @date 9/9/2022
          * @deprecated the need for description will be inferred by the item object in the options list
         */
        "withDescription"?: boolean;
        "withSearch"?: boolean;
    }
    /**
     * DEPRECATED Dropdown Component
     * @date 9/14/2022
     * @deprecated Use  mylib-dropdown instead.
     */
    interface MylibDropdownMenu {
        "alternate"?: true | false;
        "initialValue"?: string;
        "onValueChange"?: (event: MylibDropdownMenuCustomEvent<any>) => void;
        "optionsList"?: string;
        "placeholder"?: string;
        "placeholderIcon"?: string;
        "truncateDescription"?: true | false;
        "withDescription"?: true | false;
    }
    /**
     * Component for uploading files.
     * @fires fileRejected - Fired when a file cannot be added to the queue due to a constrain: file-size, file-type or maxFiles
     * @fires uploadStarting - Fired before the XHR is opened. Could be used for changing the request URL. If the default is prevented, then XHR would not be opened.
     * @fires uploadStarted - Fired when the XHR is sent.
     * @fires uploadSending - Fired when the XHR has been opened but not sent yet.
     * @fires uploadError - Fired in case the upload process failed.
     * @fires uploadProgress - Fired as many times as the progress is updated.
     * @fires uploadAbort - Fired when retry abort is requested. If the default is prevented, then the file upload would not be aborted.
     * @fires uploadCompleted - Fired in case the upload process succeed.
     */
    interface MylibFileUpload {
        /**
          * Specifies the types of files that the server accepts. Syntax: a comma-separated list of MIME type patterns (wildcards are allowed) or file extensions. Notice that MIME types are widely supported, while file extensions are only implemented in certain browsers, so avoid using it. Example: accept="video/*,image/tiff" or accept=".pdf,audio/mp3"
          * @date 12/1/2022 - 11:31:37 PM
          * @example accept="video/*,image/tiff" or accept=".pdf,audio/mp3"
          * @type {string}
         */
        "accept"?: string;
        /**
          * Specifies the 'name' property at Content-Disposition
          * @date 12/1/2022 - 11:44:58 PM
          * @type {string}
         */
        "formDataName"?: string;
        /**
          * Key-Value map to send to the server. If you set this property as an attribute, use a valid JSON string.
          * @date 12/1/2022 - 11:45:48 PM
          * @type {{}}
         */
        "headers"?: {};
        /**
          * Specifies if the component is draggable.
          * @type {boolean}
          * @default false
         */
        "isDraggable"?: boolean;
        /**
          * Prevents upload(s) from immediately uploading upon adding file(s). When set, you must manually trigger uploads using the uploadFiles method
          * @date 12/1/2022 - 11:36:27 PM
          * @type {boolean}
         */
        "manualUpload"?: boolean;
        /**
          * Specifies the maximum file size in bytes allowed to upload. Notice that it is a client-side constraint, which will be checked before sending the request. Obviously you need to do the same validation in the server-side and be sure that they are aligned. Maximum default value is 2e+6 = 2MB
          * @date 12/1/2022 - 11:35:14 PM
          * @type {number}
         */
        "maxFileSize"?: number;
        /**
          * Limit of files to upload, by default it is unlimited. If the value is set to one, native file browser will prevent selecting multiple files.
          * @date 12/1/2022 - 11:34:33 PM
          * @type {number}
         */
        "maxFiles"?: number;
        /**
          * HTTP Method used to send the files. Only POST and PUT are allowed.
          * @date 12/1/2022 - 11:45:15 PM
          * @type {string}
         */
        "method"?: string;
        /**
          * Fired when a file cannot be added to the queue due to a constrain: file-size, file-type or maxFiles
          * @date 12/1/2022 - 11:36:53 PM
          * @type {EventEmitter}
         */
        "onFileRejected"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired when retry abort is requested. If the default is prevented, then the file upload would not be aborted.
          * @date 12/1/2022 - 11:37:16 PM
          * @type {EventEmitter}
         */
        "onUploadAbort"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired in case the upload process succeed.
          * @date 12/1/2022 - 11:41:21 PM
          * @type {EventEmitter}
         */
        "onUploadCompleted"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired in case the upload process failed.
          * @date 12/1/2022 - 11:38:09 PM
          * @type {EventEmitter}
         */
        "onUploadError"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired as many times as the progress is updated.
          * @date 12/1/2022 - 11:38:20 PM
          * @type {EventEmitter}
         */
        "onUploadProgress"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired when the XHR has been opened but not sent yet. Useful for appending data keys to the FormData object, for changing some parameters like headers, etc. If the event is defaultPrevented, mylib-file-upload will not send the request allowing the user to do something on his own.
          * @date 12/1/2022 - 11:39:51 PM
          * @type {EventEmitter}
         */
        "onUploadSending"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired when the XHR is sent.
          * @date 12/1/2022 - 11:42:08 PM
          * @type {EventEmitter}
         */
        "onUploadStarted"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * Fired before the XHR is opened. Could be used for changing the request URL. If the default is prevented, then XHR would not be opened.
          * @date 12/1/2022 - 11:37:57 PM
          * @type {EventEmitter}
         */
        "onUploadStarting"?: (event: MylibFileUploadCustomEvent<any>) => void;
        /**
          * The server URL. The default value is an empty string, which means that window.location will be used.
          * @date 12/1/2022 - 11:34:08 PM
          * @type {(string | undefined)}
         */
        "targetUrl"?: string | undefined;
        /**
          * Max time in milliseconds for the entire upload process, if exceeded the request will be aborted. Zero means that there is no timeout.
          * @date 12/1/2022 - 11:48:01 PM
          * @type {number}
         */
        "timeout"?: number;
        /**
          * The upload engine instance used for file uploads.
          * @type {IMylibFileUploadEngine}
          * @default new MylibXHRFileUploadEngine()
         */
        "uploadEngineInstance"?: IMylibFileUploadEngine;
        /**
          * Set the withCredentials flag on the request.
          * @date 12/1/2022 - 11:48:14 PM
          * @type {boolean}
         */
        "withCredentials"?: boolean;
    }
    interface MylibFloatingButton {
        "icon"?: string | undefined;
        "iconType"?: floatingButtonIconType;
        "label"?: string | undefined;
        "onClickEvent"?: (event: MylibFloatingButtonCustomEvent<any>) => void;
        "size"?: floatingButtonSizes;
        "variant"?: floatingButtonVariants;
    }
    /**
     * DEPRECATED Global Frame Component
     * @date 6/29/2022
     * @deprecated Use  mylib-application-frame instead.
     */
    interface MylibGlobalFrame {
        "appName"?: string;
    }
    interface MylibGlobalFrameAppName {
        "appName"?: string;
    }
    interface MylibIcon {
        "name"?: string;
        "size"?: string;
        "type"?: 'font' | 'svg';
    }
    interface MylibInformationBar {
        "buttonText"?: string;
        "closable"?: boolean;
        "fullWidthMode"?: boolean;
        "informationText"?: string;
        "label"?: string;
        "onClickEvent"?: (event: MylibInformationBarCustomEvent<any>) => void;
        "onCloseEvent"?: (event: MylibInformationBarCustomEvent<any>) => void;
        "useIcon"?: boolean;
        "variant"?: 'info' | 'success' | 'warning' | 'error';
    }
    interface MylibInputField {
        "alternateStyle"?: boolean;
        "ariaDescribedby"?: string;
        "autofocus"?: boolean;
        "charLength"?: number;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorList"?: any[];
        "errorMessage"?: string;
        "errorMessagePosition"?: 'bottom' | 'top';
        "hint"?: string | null;
        "inputIconButton"?: string;
        "inputId"?: string | null;
        "label"?: string;
        "list"?: string | null;
        "max"?: string | null;
        "maxlength"?: number | null;
        "min"?: string | null;
        "minlength"?: number;
        "name"?: string;
        "onIconButtonAction"?: (event: MylibInputFieldCustomEvent<any>) => void;
        "onInvalidValue"?: (event: MylibInputFieldCustomEvent<any>) => void;
        "onValueChange"?: (event: MylibInputFieldCustomEvent<any>) => void;
        "pattern"?: string | null;
        "placeholder"?: string;
        "readonly"?: boolean;
        "required"?: boolean;
        "size"?: number | null;
        "step"?: string | null;
        "type"?: 'number' | 'email' | 'password' | 'url' | 'text';
        "value"?: string | number | null;
    }
    /**
     * DEPRECATED Label Component
     * @date 6/29/2022
     * @deprecated Use  mylib-property-value instead.
     */
    interface MylibLabel {
        "colon"?: boolean;
        "group"?: boolean;
        "label"?: string;
        "status"?: 'default' | 'error' | 'success' | 'warning' | 'hyperlink';
    }
    interface MylibLink {
        "disabled"?: boolean;
        "hideTooltip"?: boolean;
        "onClickEvent"?: (event: MylibLinkCustomEvent<any>) => void;
        "rel"?: string | undefined;
        "target"?: string;
        "text"?: string | undefined;
        "tooltipText"?: string | undefined;
        "truncated"?: boolean;
        "url"?: string | undefined;
    }
    interface MylibLoadingIndicator {
        "bufferProgress"?: number | undefined;
        "i18nComplete"?: string;
        "i18nLoading"?: string;
        "max"?: number | undefined;
        "min"?: number | undefined;
        "progress"?: number | undefined;
        "size"?: string | undefined;
        "type"?: string | undefined;
    }
    interface MylibLogo {
        "colorScheme"?: ThemeColorSchemes;
    }
    interface MylibMenu {
        /**
          * @date 12/11/2023
          * @deprecated isShowMenu is not necessary anymore, you can replace it by the controlled attribute 'opened'
         */
        "isShowMenu"?: boolean;
        "menuItems"?: IMylibMenuItem[] | string;
        "menuTitle"?: string;
        "minWidth"?: number;
        "onItemClick"?: (event: MylibMenuCustomEvent<any>) => void;
        "onItemSelectionChanged"?: (event: MylibMenuCustomEvent<any>) => void;
        /**
          * Event emitted when the opened state of the menu changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onOpenedChange"?: (event: MylibMenuCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        "onSubItemsSelectionChanged"?: (event: MylibMenuCustomEvent<any>) => void;
        "opened"?: boolean;
    }
    interface MylibMenuItem {
        "canBeSelected"?: boolean;
        "hasSubItems"?: boolean;
        "iconName"?: string;
        "itemKey"?: string;
        "noCheckIcon"?: boolean;
        "onSelectChanged"?: (event: MylibMenuItemCustomEvent<any>) => void;
        "removePaddingLeft"?: boolean;
        "selected"?: boolean;
        "target"?: string;
        "text"?: string;
        "url"?: string;
        "useBottomDivider"?: boolean;
    }
    interface MylibModalDialog {
        "dialogTitle"?: string;
        "hideCloseButton"?: boolean;
        "isDraggable"?: boolean;
        "isModal"?: boolean;
        /**
          * Fired when the opened property changes.
          * @type {EventEmitter}
         */
        "onClosedChange"?: (event: MylibModalDialogCustomEvent<any>) => void;
        /**
          * Fired when the opened property changes.
          * @date 10/9/2022
          * @type {EventEmitter}
         */
        "onOpenedChange"?: (event: MylibModalDialogCustomEvent<any>) => void;
        "opened"?: boolean;
        "type"?: 'input' | 'danger';
    }
    interface MylibNotificationBadge {
        "value"?: number;
        "variant"?: 'default' | 'positive' | 'negative' | 'warning';
    }
    interface MylibPanel {
        "fullHeightMode"?: boolean;
        "headerTitle"?: string;
        "hideSwitchHeightAction"?: boolean;
        "hideSwitchPinAction"?: boolean;
        /**
          * Event emitted when the fullHeightMode state of the panel changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onFullHeightModeChange"?: (event: MylibPanelCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        /**
          * Event emitted when the opened state of the panel changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onOpenedChange"?: (event: MylibPanelCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        "onPanelClosed"?: (event: MylibPanelCustomEvent<any>) => void;
        "onPanelOpened"?: (event: MylibPanelCustomEvent<any>) => void;
        /**
          * Event emitted when the pinned state of the panel changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onPinnedChange"?: (event: MylibPanelCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        "openDirection"?: 'left-to-right' | 'right-to-left';
        "opened"?: boolean;
        "pinned"?: boolean;
    }
    interface MylibPanelBody {
    }
    interface MylibPanelFooter {
    }
    interface MylibPanelSection {
        "collapsed"?: boolean;
        "compactMode"?: boolean;
        "hideTooltip"?: boolean;
        "label"?: string;
        "onCollapsedChange"?: (event: MylibPanelSectionCustomEvent<any>) => void;
    }
    interface MylibPanelSectionCommand {
        "disabled"?: boolean;
        "hiddenLabel"?: boolean;
        "icon"?: string;
        "iconType"?: 'font' | 'svg';
        "isToggle"?: boolean;
        "label"?: string;
        "onClickEvent"?: (event: MylibPanelSectionCommandCustomEvent<any>) => void;
        "onClickingEvent"?: (event: MylibPanelSectionCommandCustomEvent<any>) => void;
        "toggled"?: boolean;
    }
    interface MylibPopupMenu {
        "alignment"?: 'left' | 'right';
        "colorScheme"?: ThemeColorSchemes;
        "direction"?: 'below' | 'above';
        "notCloseClickOutside"?: boolean;
        /**
          * Fired when the opened property changes.
          * @date 10/9/2022
          * @type {EventEmitter}
         */
        "onOpenedChanged"?: (event: MylibPopupMenuCustomEvent<any>) => void;
        "opened"?: boolean;
        "popupTargetTriggerEvent"?: string;
        "popupTitle"?: string;
        "showCloseButton"?: boolean;
    }
    /**
     * DEPRECATED Dropdown Component
     * @date 7/27/2023
     * @deprecated Use mylib-primary-navigation-bar instead.
     */
    interface MylibPrimaryNavigation {
        "hideAccountIcon"?: boolean;
        "hideCommandItemsLabel"?: boolean;
        "icon"?: string;
        "iconType"?: 'font' | 'svg';
        "onClickNavEvent"?: (event: MylibPrimaryNavigationCustomEvent<any>) => void;
    }
    interface MylibPrimaryNavigationBar {
        "hideAccountIcon"?: boolean;
        "hideCommandItemsLabel"?: boolean;
        "icon"?: string;
        "iconType"?: 'font' | 'svg';
        "onClickNavEvent"?: (event: MylibPrimaryNavigationBarCustomEvent<any>) => void;
    }
    interface MylibPrimaryNavigationPanel {
        "alignBottom"?: boolean;
        "closeOnClickOutside"?: boolean;
        "closeOnClickOutsideAllowedId"?: string;
        "closeOnLinkClick"?: boolean;
        "disableResizing"?: boolean;
        "onCloseOnClickOutsideEvent"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        "onCloseOnLinkClickEvent"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        "onCloseOnLinkClickingEvent"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        "onOpenedChanged"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        /**
          * Event emitted when the pinned value changes.
          * @event
          * @type {CustomEvent<ControllablePropertyChangeEventDetail>}
         */
        "onPinnedChange"?: (event: MylibPrimaryNavigationPanelCustomEvent<ControllablePropertyChangeEventDetail>) => void;
        /**
          * Emitted when the resize operation is starting.
          * @event resizeStarting
          * @type {EventEmitter}
          * @preventDefault
         */
        "onResizeStarting"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        /**
          * Emitted when the resize operation has stopped.
          * @event resizeStopping
          * @type {EventEmitter}
          * @preventDefault
         */
        "onResizeStopping"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        /**
          * Emitted while the resize operation is in progress.
          * @event resizing
          * @type {EventEmitter}
          * @preventDefault
         */
        "onResizing"?: (event: MylibPrimaryNavigationPanelCustomEvent<any>) => void;
        "opened"?: boolean;
        "panelTitle"?: string;
        "pinable"?: boolean;
        "pinned"?: boolean;
        "triggerCommandButtonToggleId"?: string;
    }
    interface MylibPrimaryNavigationPanelLink {
        "onClickEvent"?: (event: MylibPrimaryNavigationPanelLinkCustomEvent<any>) => void;
        "onSelectedChange"?: (event: MylibPrimaryNavigationPanelLinkCustomEvent<any>) => void;
        "selected"?: boolean;
        "text"?: string;
    }
    interface MylibPrimaryNavigationPanelSeparator {
    }
    interface MylibProgressBar {
        "errorMessage"?: string;
        "hint"?: string;
        "progress"?: number;
        "status"?: "progressing" | "paused" | "completed" | "error";
    }
    interface MylibProgressStepper {
        "currentStep"?: string;
        "nonInteractive"?: boolean;
        "onCurrentStepChange"?: (event: MylibProgressStepperCustomEvent<any>) => void;
        "orientation"?: 'horizontal' | 'vertical';
        "type"?: 'numeric' | 'text' | 'overflow';
    }
    interface MylibProgressStepperItem {
        "isOverflow"?: boolean;
        "label"?: string;
        "nonInteractive"?: boolean;
        "onStepperItemClick"?: (event: MylibProgressStepperItemCustomEvent<any>) => void;
        "status"?: 'completed' | 'in-progress' | 'uncomplete';
        "stepIndex"?: string;
        "tooltipPosition"?: 'top' | 'bottom' | 'right' | 'left';
        "value"?: string;
    }
    interface MylibPropertyValue {
        "colon"?: boolean;
        "group"?: boolean;
        "label"?: string;
        "status"?: 'default' | 'error' | 'success' | 'warning' | 'hyperlink';
    }
    interface MylibRadioButton {
        "checked"?: boolean;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        "isControlled"?: boolean;
        "label"?: string;
        "name"?: string;
        "onCheckedChange"?: (event: MylibRadioButtonCustomEvent<any>) => void;
        "onClicked"?: (event: MylibRadioButtonCustomEvent<any>) => void;
        "value"?: string;
        "variant"?: 'default' | 'detailed';
    }
    interface MylibRadioGroup {
        "error"?: boolean;
        "errorMessage"?: string;
        "errorTooltip"?: string;
        "isControlled"?: boolean;
        "label"?: string;
        "onValueChange"?: (event: MylibRadioGroupCustomEvent<{value: string, checked: boolean, name: string}>) => void;
        "orientation"?: 'horizontal' | 'vertical';
        "value"?: string;
        "variant"?: 'default' | 'detailed';
    }
    interface MylibSearchBox {
        "alternate"?: boolean;
        "disabled"?: boolean;
        "onSearchEvent"?: (event: MylibSearchBoxCustomEvent<any>) => void;
        "onValueChanged"?: (event: MylibSearchBoxCustomEvent<any>) => void;
        "placeholder"?: string;
        "size"?: 'sm' | 'md';
        "value"?: string;
    }
    interface MylibSegmentedButton {
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name"?: string;
        "onItemClick"?: (event: MylibSegmentedButtonCustomEvent<any>) => void;
        "onValueChange"?: (event: MylibSegmentedButtonCustomEvent<any>) => void;
        "size"?: 'md' | 'lg';
        "value"?: string;
        "variant"?: 'list' | 'grid';
    }
    interface MylibSegmentedButtonItem {
        "description"?: string;
        "disabled"?: boolean;
        "icon"?: string;
        "iconSize"?: 'md' | 'lg';
        "iconType"?: 'font' | 'svg' | 'img';
        "label"?: string;
        "name"?: string;
        "onButtonItemClick"?: (event: MylibSegmentedButtonItemCustomEvent<any>) => void;
        "onSelectedChange"?: (event: MylibSegmentedButtonItemCustomEvent<any>) => void;
        "size"?: 'md' | 'lg';
        "value"?: string;
    }
    interface MylibSlider {
        "autoMarkLabels"?: boolean;
        "max"?: number;
        "min"?: number;
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name"?: string;
        "onChangeComplete"?: (event: MylibSliderCustomEvent<any>) => void;
        "onValueChange"?: (event: MylibSliderCustomEvent<CustomEvent>) => void;
        "optionsTickMarks"?: any[];
        "showTickMarks"?: boolean;
        "snapToStep"?: boolean;
        "step"?: number;
        "value"?: any;
        "withButtons"?: boolean;
    }
    interface MylibSplitter {
        "orientation"?: SplitterOrientation;
    }
    interface MylibSplitterItem {
        "onSizeChanged"?: (event: MylibSplitterItemCustomEvent<any>) => void;
        "size"?: number;
    }
    interface MylibSwitch {
        /**
          * If `true`, the toggle is selected.
         */
        "checked"?: boolean;
        /**
          * Sets the color scheme.
         */
        "colorScheme"?: ThemeColorSchemes;
        /**
          * If `true`, the user cannot interact with the toggle.
         */
        "disabled"?: boolean;
        /**
          * Property responsible for setting the label
         */
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
         */
        "name"?: string;
        /**
          * Emitted when the value property has changed.
         */
        "onValueChange"?: (event: MylibSwitchCustomEvent<any>) => void;
    }
    interface MylibTab {
        "disabled"?: boolean;
        "icon"?: string;
        "label"?: string;
        "leftPaddingLess"?: boolean;
        "onSelectedChange"?: (event: MylibTabCustomEvent<string>) => void;
        "onTabSelected"?: (event: MylibTabCustomEvent<any>) => void;
        "selected"?: boolean;
        "tab"?: number;
        "variant"?: TabsetStyleVariant;
    }
    interface MylibTable {
        "activeRowIndex"?: number;
        "checkboxSelection"?: boolean;
        "colorScheme"?: ThemeColorSchemes;
        "columns"?: string;
        "config"?: string;
        "isCheckboxControlled"?: boolean;
        "onActiveRow"?: (event: MylibTableCustomEvent<any>) => void;
        "onCheckboxChange"?: (event: MylibTableCustomEvent<any>) => void;
        "source"?: string;
    }
    interface MylibTableHeader {
        "checkboxSelection"?: boolean;
        "colorScheme"?: ThemeColorSchemes;
        "columns"?: TableHeaderColumn[];
        "config"?: TableHeaderConfig;
        "hasRequiredAttributes"?: boolean;
        "onSortColumn"?: (event: MylibTableHeaderCustomEvent<any>) => void;
        "tableEl"?: HTMLMylibTableElement;
    }
    interface MylibTableIconButton {
        "colorScheme"?: ThemeColorSchemes;
        "icon"?: string | undefined;
        "isButton"?: boolean;
        "onClickEvent"?: (event: MylibTableIconButtonCustomEvent<any>) => void;
        "size"?: string | undefined;
    }
    interface MylibTabset {
        "borderless"?: boolean;
        "moreLabel"?: string;
        "noPadding"?: boolean;
        "onOverflowedTabSelected"?: (event: MylibTabsetCustomEvent<any>) => void;
        "selectedTab"?: number;
        "variant"?: TabsetStyleVariant;
    }
    interface MylibTag {
        "closable"?: boolean;
        "label": string;
        "onCloseEvent"?: (event: MylibTagCustomEvent<any>) => void;
    }
    interface MylibTextarea {
        "alternateStyle"?: boolean;
        "ariaDescribedby"?: string;
        "autofocus"?: boolean;
        "dirty"?: boolean;
        "disabled"?: boolean;
        "error"?: boolean;
        "errorArr"?: any[];
        "errorMessage"?: string;
        "errorMessagePosition"?: 'bottom' | 'top';
        "hint"?: string | null;
        "inputId"?: string | null;
        "label"?: string;
        "maxlength"?: number | null;
        "name"?: string;
        "onChangeInput"?: (event: MylibTextareaCustomEvent<any>) => void;
        "readonly"?: boolean;
        "required"?: boolean;
        "rows"?: number;
        "value"?: string | number | null;
    }
    interface MylibTimepicker {
        "disabled"?: boolean;
        "error"?: boolean;
        "hint"?: string;
        "label"?: string;
        /**
          * The name of the control, which is submitted with the form data.
          * @type {string}
          * @default {auto generated name}
         */
        "name"?: string;
        "onOpenedChange"?: (event: MylibTimepickerCustomEvent<any>) => void;
        "onValueChange"?: (event: MylibTimepickerCustomEvent<any>) => void;
        /**
          * If `true`, turns the date picker dropdown visible.
          * @type {boolean}
          * @default undefined
         */
        "opened"?: boolean;
        /**
          * The current value of the date picker in a Date string format (using the function 'toJSON' from Date object).
          * @type {string}
          * @default undefined
         */
        "value"?: string;
    }
    interface MylibToast {
        "description"?: string;
        "hideCloseButton"?: boolean;
        "imageUrl"?: string;
        "noAutoClose"?: boolean;
        "onOpenedChanged"?: (event: MylibToastCustomEvent<any>) => void;
        "opened"?: boolean;
        "subDescription"?: string;
        "toastTitle"?: string;
        "variant"?: 'primary' | 'warning' | 'error';
    }
    interface MylibTooltip {
        "delay"?: number;
        "internalPosition"?: string;
        "label"?: string;
        "parentContainerTarget"?: string | HTMLElement;
        "position"?: 'right' | 'bottom' | 'left' | 'top';
        "target"?: string;
        "text"?: string;
        "variation"?: 'default' | 'error' | 'caution' | 'success';
    }
    interface MylibTree {
        "onItemClick"?: (event: MylibTreeCustomEvent<any>) => void;
        "showDottedGuideline"?: boolean;
    }
    interface MylibViewTable {
        "columns"?: Column[];
        "rowNmb"?: number;
    }
    interface IntrinsicElements {
        "mylib-accordion": MylibAccordion;
        "mylib-accordion-action": MylibAccordionAction;
        "mylib-accordion-item": MylibAccordionItem;
        "mylib-advanced-search": MylibAdvancedSearch;
        "mylib-application-frame": MylibApplicationFrame;
        "mylib-application-frame-app-name": MylibApplicationFrameAppName;
        "mylib-avatar": MylibAvatar;
        "mylib-breadcrumb": MylibBreadcrumb;
        "mylib-button": MylibButton;
        "mylib-card": MylibCard;
        "mylib-card-body": MylibCardBody;
        "mylib-card-header": MylibCardHeader;
        "mylib-card-summary": MylibCardSummary;
        "mylib-card-title": MylibCardTitle;
        "mylib-checkbox": MylibCheckbox;
        "mylib-checkbox-group": MylibCheckboxGroup;
        "mylib-combo-box": MylibComboBox;
        "mylib-combo-box-item": MylibComboBoxItem;
        "mylib-command-bar": MylibCommandBar;
        "mylib-command-button": MylibCommandButton;
        "mylib-command-dropdown": MylibCommandDropdown;
        "mylib-command-dropdown-item": MylibCommandDropdownItem;
        "mylib-command-pipe": MylibCommandPipe;
        "mylib-datepicker": MylibDatepicker;
        "mylib-datepicker-calendar": MylibDatepickerCalendar;
        "mylib-default-cell": MylibDefaultCell;
        "mylib-default-cell-group": MylibDefaultCellGroup;
        "mylib-dropdown": MylibDropdown;
        "mylib-dropdown-menu": MylibDropdownMenu;
        "mylib-file-upload": MylibFileUpload;
        "mylib-floating-button": MylibFloatingButton;
        "mylib-global-frame": MylibGlobalFrame;
        "mylib-global-frame-app-name": MylibGlobalFrameAppName;
        "mylib-icon": MylibIcon;
        "mylib-information-bar": MylibInformationBar;
        "mylib-input-field": MylibInputField;
        "mylib-label": MylibLabel;
        "mylib-link": MylibLink;
        "mylib-loading-indicator": MylibLoadingIndicator;
        "mylib-logo": MylibLogo;
        "mylib-menu": MylibMenu;
        "mylib-menu-item": MylibMenuItem;
        "mylib-modal-dialog": MylibModalDialog;
        "mylib-notification-badge": MylibNotificationBadge;
        "mylib-panel": MylibPanel;
        "mylib-panel-body": MylibPanelBody;
        "mylib-panel-footer": MylibPanelFooter;
        "mylib-panel-section": MylibPanelSection;
        "mylib-panel-section-command": MylibPanelSectionCommand;
        "mylib-popup-menu": MylibPopupMenu;
        "mylib-primary-navigation": MylibPrimaryNavigation;
        "mylib-primary-navigation-bar": MylibPrimaryNavigationBar;
        "mylib-primary-navigation-panel": MylibPrimaryNavigationPanel;
        "mylib-primary-navigation-panel-link": MylibPrimaryNavigationPanelLink;
        "mylib-primary-navigation-panel-separator": MylibPrimaryNavigationPanelSeparator;
        "mylib-progress-bar": MylibProgressBar;
        "mylib-progress-stepper": MylibProgressStepper;
        "mylib-progress-stepper-item": MylibProgressStepperItem;
        "mylib-property-value": MylibPropertyValue;
        "mylib-radio-button": MylibRadioButton;
        "mylib-radio-group": MylibRadioGroup;
        "mylib-search-box": MylibSearchBox;
        "mylib-segmented-button": MylibSegmentedButton;
        "mylib-segmented-button-item": MylibSegmentedButtonItem;
        "mylib-slider": MylibSlider;
        "mylib-splitter": MylibSplitter;
        "mylib-splitter-item": MylibSplitterItem;
        "mylib-switch": MylibSwitch;
        "mylib-tab": MylibTab;
        "mylib-table": MylibTable;
        "mylib-table-header": MylibTableHeader;
        "mylib-table-icon-button": MylibTableIconButton;
        "mylib-tabset": MylibTabset;
        "mylib-tag": MylibTag;
        "mylib-textarea": MylibTextarea;
        "mylib-timepicker": MylibTimepicker;
        "mylib-toast": MylibToast;
        "mylib-tooltip": MylibTooltip;
        "mylib-tree": MylibTree;
        "mylib-view-table": MylibViewTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mylib-accordion": LocalJSX.MylibAccordion & JSXBase.HTMLAttributes<HTMLMylibAccordionElement>;
            "mylib-accordion-action": LocalJSX.MylibAccordionAction & JSXBase.HTMLAttributes<HTMLMylibAccordionActionElement>;
            "mylib-accordion-item": LocalJSX.MylibAccordionItem & JSXBase.HTMLAttributes<HTMLMylibAccordionItemElement>;
            "mylib-advanced-search": LocalJSX.MylibAdvancedSearch & JSXBase.HTMLAttributes<HTMLMylibAdvancedSearchElement>;
            "mylib-application-frame": LocalJSX.MylibApplicationFrame & JSXBase.HTMLAttributes<HTMLMylibApplicationFrameElement>;
            "mylib-application-frame-app-name": LocalJSX.MylibApplicationFrameAppName & JSXBase.HTMLAttributes<HTMLMylibApplicationFrameAppNameElement>;
            "mylib-avatar": LocalJSX.MylibAvatar & JSXBase.HTMLAttributes<HTMLMylibAvatarElement>;
            "mylib-breadcrumb": LocalJSX.MylibBreadcrumb & JSXBase.HTMLAttributes<HTMLMylibBreadcrumbElement>;
            "mylib-button": LocalJSX.MylibButton & JSXBase.HTMLAttributes<HTMLMylibButtonElement>;
            "mylib-card": LocalJSX.MylibCard & JSXBase.HTMLAttributes<HTMLMylibCardElement>;
            "mylib-card-body": LocalJSX.MylibCardBody & JSXBase.HTMLAttributes<HTMLMylibCardBodyElement>;
            "mylib-card-header": LocalJSX.MylibCardHeader & JSXBase.HTMLAttributes<HTMLMylibCardHeaderElement>;
            "mylib-card-summary": LocalJSX.MylibCardSummary & JSXBase.HTMLAttributes<HTMLMylibCardSummaryElement>;
            "mylib-card-title": LocalJSX.MylibCardTitle & JSXBase.HTMLAttributes<HTMLMylibCardTitleElement>;
            "mylib-checkbox": LocalJSX.MylibCheckbox & JSXBase.HTMLAttributes<HTMLMylibCheckboxElement>;
            "mylib-checkbox-group": LocalJSX.MylibCheckboxGroup & JSXBase.HTMLAttributes<HTMLMylibCheckboxGroupElement>;
            "mylib-combo-box": LocalJSX.MylibComboBox & JSXBase.HTMLAttributes<HTMLMylibComboBoxElement>;
            "mylib-combo-box-item": LocalJSX.MylibComboBoxItem & JSXBase.HTMLAttributes<HTMLMylibComboBoxItemElement>;
            "mylib-command-bar": LocalJSX.MylibCommandBar & JSXBase.HTMLAttributes<HTMLMylibCommandBarElement>;
            "mylib-command-button": LocalJSX.MylibCommandButton & JSXBase.HTMLAttributes<HTMLMylibCommandButtonElement>;
            "mylib-command-dropdown": LocalJSX.MylibCommandDropdown & JSXBase.HTMLAttributes<HTMLMylibCommandDropdownElement>;
            "mylib-command-dropdown-item": LocalJSX.MylibCommandDropdownItem & JSXBase.HTMLAttributes<HTMLMylibCommandDropdownItemElement>;
            "mylib-command-pipe": LocalJSX.MylibCommandPipe & JSXBase.HTMLAttributes<HTMLMylibCommandPipeElement>;
            "mylib-datepicker": LocalJSX.MylibDatepicker & JSXBase.HTMLAttributes<HTMLMylibDatepickerElement>;
            /**
             * @class DatepickerCalendar
             * The DatepickerCalendar component is responsible for rendering a datepicker calendar
             * and handling user interactions with the calendar.
             */
            "mylib-datepicker-calendar": LocalJSX.MylibDatepickerCalendar & JSXBase.HTMLAttributes<HTMLMylibDatepickerCalendarElement>;
            "mylib-default-cell": LocalJSX.MylibDefaultCell & JSXBase.HTMLAttributes<HTMLMylibDefaultCellElement>;
            "mylib-default-cell-group": LocalJSX.MylibDefaultCellGroup & JSXBase.HTMLAttributes<HTMLMylibDefaultCellGroupElement>;
            "mylib-dropdown": LocalJSX.MylibDropdown & JSXBase.HTMLAttributes<HTMLMylibDropdownElement>;
            /**
             * DEPRECATED Dropdown Component
             * @date 9/14/2022
             * @deprecated Use  mylib-dropdown instead.
             */
            "mylib-dropdown-menu": LocalJSX.MylibDropdownMenu & JSXBase.HTMLAttributes<HTMLMylibDropdownMenuElement>;
            /**
             * Component for uploading files.
             * @fires fileRejected - Fired when a file cannot be added to the queue due to a constrain: file-size, file-type or maxFiles
             * @fires uploadStarting - Fired before the XHR is opened. Could be used for changing the request URL. If the default is prevented, then XHR would not be opened.
             * @fires uploadStarted - Fired when the XHR is sent.
             * @fires uploadSending - Fired when the XHR has been opened but not sent yet.
             * @fires uploadError - Fired in case the upload process failed.
             * @fires uploadProgress - Fired as many times as the progress is updated.
             * @fires uploadAbort - Fired when retry abort is requested. If the default is prevented, then the file upload would not be aborted.
             * @fires uploadCompleted - Fired in case the upload process succeed.
             */
            "mylib-file-upload": LocalJSX.MylibFileUpload & JSXBase.HTMLAttributes<HTMLMylibFileUploadElement>;
            "mylib-floating-button": LocalJSX.MylibFloatingButton & JSXBase.HTMLAttributes<HTMLMylibFloatingButtonElement>;
            /**
             * DEPRECATED Global Frame Component
             * @date 6/29/2022
             * @deprecated Use  mylib-application-frame instead.
             */
            "mylib-global-frame": LocalJSX.MylibGlobalFrame & JSXBase.HTMLAttributes<HTMLMylibGlobalFrameElement>;
            "mylib-global-frame-app-name": LocalJSX.MylibGlobalFrameAppName & JSXBase.HTMLAttributes<HTMLMylibGlobalFrameAppNameElement>;
            "mylib-icon": LocalJSX.MylibIcon & JSXBase.HTMLAttributes<HTMLMylibIconElement>;
            "mylib-information-bar": LocalJSX.MylibInformationBar & JSXBase.HTMLAttributes<HTMLMylibInformationBarElement>;
            "mylib-input-field": LocalJSX.MylibInputField & JSXBase.HTMLAttributes<HTMLMylibInputFieldElement>;
            /**
             * DEPRECATED Label Component
             * @date 6/29/2022
             * @deprecated Use  mylib-property-value instead.
             */
            "mylib-label": LocalJSX.MylibLabel & JSXBase.HTMLAttributes<HTMLMylibLabelElement>;
            "mylib-link": LocalJSX.MylibLink & JSXBase.HTMLAttributes<HTMLMylibLinkElement>;
            "mylib-loading-indicator": LocalJSX.MylibLoadingIndicator & JSXBase.HTMLAttributes<HTMLMylibLoadingIndicatorElement>;
            "mylib-logo": LocalJSX.MylibLogo & JSXBase.HTMLAttributes<HTMLMylibLogoElement>;
            "mylib-menu": LocalJSX.MylibMenu & JSXBase.HTMLAttributes<HTMLMylibMenuElement>;
            "mylib-menu-item": LocalJSX.MylibMenuItem & JSXBase.HTMLAttributes<HTMLMylibMenuItemElement>;
            "mylib-modal-dialog": LocalJSX.MylibModalDialog & JSXBase.HTMLAttributes<HTMLMylibModalDialogElement>;
            "mylib-notification-badge": LocalJSX.MylibNotificationBadge & JSXBase.HTMLAttributes<HTMLMylibNotificationBadgeElement>;
            "mylib-panel": LocalJSX.MylibPanel & JSXBase.HTMLAttributes<HTMLMylibPanelElement>;
            "mylib-panel-body": LocalJSX.MylibPanelBody & JSXBase.HTMLAttributes<HTMLMylibPanelBodyElement>;
            "mylib-panel-footer": LocalJSX.MylibPanelFooter & JSXBase.HTMLAttributes<HTMLMylibPanelFooterElement>;
            "mylib-panel-section": LocalJSX.MylibPanelSection & JSXBase.HTMLAttributes<HTMLMylibPanelSectionElement>;
            "mylib-panel-section-command": LocalJSX.MylibPanelSectionCommand & JSXBase.HTMLAttributes<HTMLMylibPanelSectionCommandElement>;
            "mylib-popup-menu": LocalJSX.MylibPopupMenu & JSXBase.HTMLAttributes<HTMLMylibPopupMenuElement>;
            /**
             * DEPRECATED Dropdown Component
             * @date 7/27/2023
             * @deprecated Use mylib-primary-navigation-bar instead.
             */
            "mylib-primary-navigation": LocalJSX.MylibPrimaryNavigation & JSXBase.HTMLAttributes<HTMLMylibPrimaryNavigationElement>;
            "mylib-primary-navigation-bar": LocalJSX.MylibPrimaryNavigationBar & JSXBase.HTMLAttributes<HTMLMylibPrimaryNavigationBarElement>;
            "mylib-primary-navigation-panel": LocalJSX.MylibPrimaryNavigationPanel & JSXBase.HTMLAttributes<HTMLMylibPrimaryNavigationPanelElement>;
            "mylib-primary-navigation-panel-link": LocalJSX.MylibPrimaryNavigationPanelLink & JSXBase.HTMLAttributes<HTMLMylibPrimaryNavigationPanelLinkElement>;
            "mylib-primary-navigation-panel-separator": LocalJSX.MylibPrimaryNavigationPanelSeparator & JSXBase.HTMLAttributes<HTMLMylibPrimaryNavigationPanelSeparatorElement>;
            "mylib-progress-bar": LocalJSX.MylibProgressBar & JSXBase.HTMLAttributes<HTMLMylibProgressBarElement>;
            "mylib-progress-stepper": LocalJSX.MylibProgressStepper & JSXBase.HTMLAttributes<HTMLMylibProgressStepperElement>;
            "mylib-progress-stepper-item": LocalJSX.MylibProgressStepperItem & JSXBase.HTMLAttributes<HTMLMylibProgressStepperItemElement>;
            "mylib-property-value": LocalJSX.MylibPropertyValue & JSXBase.HTMLAttributes<HTMLMylibPropertyValueElement>;
            "mylib-radio-button": LocalJSX.MylibRadioButton & JSXBase.HTMLAttributes<HTMLMylibRadioButtonElement>;
            "mylib-radio-group": LocalJSX.MylibRadioGroup & JSXBase.HTMLAttributes<HTMLMylibRadioGroupElement>;
            "mylib-search-box": LocalJSX.MylibSearchBox & JSXBase.HTMLAttributes<HTMLMylibSearchBoxElement>;
            "mylib-segmented-button": LocalJSX.MylibSegmentedButton & JSXBase.HTMLAttributes<HTMLMylibSegmentedButtonElement>;
            "mylib-segmented-button-item": LocalJSX.MylibSegmentedButtonItem & JSXBase.HTMLAttributes<HTMLMylibSegmentedButtonItemElement>;
            "mylib-slider": LocalJSX.MylibSlider & JSXBase.HTMLAttributes<HTMLMylibSliderElement>;
            "mylib-splitter": LocalJSX.MylibSplitter & JSXBase.HTMLAttributes<HTMLMylibSplitterElement>;
            "mylib-splitter-item": LocalJSX.MylibSplitterItem & JSXBase.HTMLAttributes<HTMLMylibSplitterItemElement>;
            "mylib-switch": LocalJSX.MylibSwitch & JSXBase.HTMLAttributes<HTMLMylibSwitchElement>;
            "mylib-tab": LocalJSX.MylibTab & JSXBase.HTMLAttributes<HTMLMylibTabElement>;
            "mylib-table": LocalJSX.MylibTable & JSXBase.HTMLAttributes<HTMLMylibTableElement>;
            "mylib-table-header": LocalJSX.MylibTableHeader & JSXBase.HTMLAttributes<HTMLMylibTableHeaderElement>;
            "mylib-table-icon-button": LocalJSX.MylibTableIconButton & JSXBase.HTMLAttributes<HTMLMylibTableIconButtonElement>;
            "mylib-tabset": LocalJSX.MylibTabset & JSXBase.HTMLAttributes<HTMLMylibTabsetElement>;
            "mylib-tag": LocalJSX.MylibTag & JSXBase.HTMLAttributes<HTMLMylibTagElement>;
            "mylib-textarea": LocalJSX.MylibTextarea & JSXBase.HTMLAttributes<HTMLMylibTextareaElement>;
            "mylib-timepicker": LocalJSX.MylibTimepicker & JSXBase.HTMLAttributes<HTMLMylibTimepickerElement>;
            "mylib-toast": LocalJSX.MylibToast & JSXBase.HTMLAttributes<HTMLMylibToastElement>;
            "mylib-tooltip": LocalJSX.MylibTooltip & JSXBase.HTMLAttributes<HTMLMylibTooltipElement>;
            "mylib-tree": LocalJSX.MylibTree & JSXBase.HTMLAttributes<HTMLMylibTreeElement>;
            "mylib-view-table": LocalJSX.MylibViewTable & JSXBase.HTMLAttributes<HTMLMylibViewTableElement>;
        }
    }
}
